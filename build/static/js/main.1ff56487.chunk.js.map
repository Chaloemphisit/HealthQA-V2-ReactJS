{"version":3,"sources":["img/header-logo.png","constants/index.js","util/APIUtils.js","user/login/Login.js","user/signup/Signup.js","util/Colors.js","common/NotFound.js","common/ServerError.js","common/QuestionsListLoading.js","user/profile/UserQuestionTabs.js","user/profile/Profile.js","common/AppHeader.js","common/LoadingIndicator.js","home/QuestionTabs.js","home/Home.js","common/PrivateRoute.js","topic/Answer.js","topic/DateUltils.js","topic/Topic.js","contactus/ContactUs.js","user/profile/EditProfile.js","admin/RequestRemove.js","admin/signup/SignupAdmin.js","admin/signup/SignupDoctor.js","admin/ManageUsers.js","topic/NewTopic.js","admin/ManageTopic.js","app/App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","API_BASE_URL","ACCESS_TOKEN","NAME_MIN_LENGTH","NAME_MAX_LENGTH","USERNAME_MIN_LENGTH","USERNAME_MAX_LENGTH","EMAIL_MAX_LENGTH","PASSWORD_MIN_LENGTH","PASSWORD_MAX_LENGTH","request","options","headers","Headers","Content-Type","localStorage","getItem","append","defaults","Object","assign","fetch","url","then","response","json","ok","Promise","reject","deleteTopic","id","method","checkUsernameAvailability","username","checkEmailAvailability","email","FormItem","form_default","a","Item","Login","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","isAuthenticated","history","push","AntWrappedLoginForm","create","LoginForm","react_default","createElement","className","onLogin","Component","_this2","handleSubmit","bind","assertThisInitialized","event","_this3","preventDefault","form","validateFields","err","values","loginRequest","body","JSON","stringify","login","setItem","accessToken","catch","error","status","notification_default","message","description","getFieldDecorator","onSubmit","rules","required","input_default","prefix","icon_default","type","size","name","placeholder","button_default","htmlType","Link","to","Signup","validateName","length","validateStatus","errorMsg","concat","validationStatus","validateEmail","RegExp","test","validateUsername","validatePassword","password","state","firstname","value","lastname","handleInputChange","validateUsernameAvailability","validateEmailAvailability","isFormInvalid","goBack","validationFun","target","inputName","inputValue","setState","defineProperty","objectSpread","signupRequest","signup","success","Signup_FormItem","label","help","autoComplete","onChange","hasFeedback","onBlur","disabled","_this4","usernameValue","usernameValidation","available","_this5","emailValue","emailValidation","colors","NotFound","ServerError","QuestionsListLoading","reactstrap_es","bundle_default","width","count","UserQuestionTabs","userTopics","userAnsTopics","isLoading","loadUserTopics","e","notFound","serverError","_this$state","style","textAlign","react_tabs","activeTab","Tab","title","common_QuestionsListLoading","Fragment","map","question","index","key","topicId","topicName","marginLeft","pill","answerCount","color","index_es","icon","questionType","topicText","React","Profile","handleButtonClick","match","params","user","loadUserProfile","getUserProfile","nextProps","src_common_NotFound","src_common_ServerError","spin_default","spinning","delay","outline","avatar_default","backgroundColor","substr","hash","i","charCodeAt","Math","abs","getAvatarColor","fontSize","profile_UserQuestionTabs","AppHeader","handleMenuClick","_ref","onLogout","menuItems","navTop","currentUser","dark","expand","src","headerLogo","alt","height","authorities","authority","menu_default","ProfileDropdownMenu","mode","selectedKeys","location","pathname","lineHeight","dropdownMenu","onClick","Divider","dropdown_default","overlay","trigger","getPopupContainer","document","getElementsByClassName","href","marginRight","withRouter","LoadingIndicator","antIcon","spin","indicator","display","marginTop","QuestionTabs","handleLoadMore","loadTopics","page","arguments","undefined","axios","all","get","spread","allTopicsRes","ansTopicsRes","noAnsTopicRes","allTopics","topics","slice","ansTopics","answeredTopics","noAnsTopics","noAnswerTopic","data","content","last","message_default","destroy","align","Home","handleSearch","q","searchResult","timer","clearTimeout","setTimeout","handlesearch","console","log","fluid","result","home_QuestionTabs","PrivateRoute","component","authenticated","rest","objectWithoutProperties","Route","render","Redirect","from","TextArea","Answer","callCreateAnswer","commentData","commentText","answerText","createComment","isSubmit","smoothScroll","h","x","scrollHeight","documentElement","window","scrollTo","pageYOffset","scrollTop","clientTop","handleLogout","validateAnswerText","ansForm","Answer_FormItem","rows","beautyDate","dateTime","str","split","date","time","tempDate","year","month","Topic","handleLoadData","topic","confirmReportComment","ModalReportVisible","isReportTopic","reportCommentId","confirmReportTopic","handleReportTopicOK","ModalReportText","confirmLoading","Notification","handleReportCommentOK","handleReportCancel","wieght","ageY","ageM","ageD","gender","disease","questionPurpose","createDate","comments","_this$state$topic","weight","modal_default","visible","centered","onOk","onCancel","md","xs","sm","placement","lg","topic_Answer","comment","userType","commentId","ContactUs","callSendContactus","contactUsData","sendContactUs","subject","validateSubject","validateContent","tag","ContactUs_FormItem","ContactUs_TextArea","EditProfile","handleChange","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","checked","stop","_x","apply","firstName","lastName","validate","emailState","textState","submitSignUpForm","for","TabPane","tabs_default","RequestRemove","handleTopicViewButton","handleTopicDeleteButton","ModalVisible","isTopic","handleCommentDeleteButton","handleModalCancel","handleModalTopicOK","ModalText","handleModalCommentOK","defaultActiveKey","animated","tabBarStyle","tab","striped","scope","substring","ghost","shape","SignupAdmin","signupAdmin","SignupAdmin_FormItem","row_default","col_default","span","SignupDoctor","signupDoctor","SignupDoctor_FormItem","ManageUsers","admin","doctor","handleDeleteButton","handleModalOK","toggleDoctor","modal","isDoctor","toggleAdmin","toggle","isOpen","signup_SignupDoctor","signup_SignupAdmin","ManageUsers_TabPane","customToggle","RadioGroup","radio_default","Group","Option","select_default","NewTopic","handleSuccess","redirect","validateTopicName","validateTopicText","validateHeight","validateWeight","handleBirthdayChange","dateString","CurrentDate","Date","birthDate","bthDate","curDate","days","ageYears","ageMonths","ageDays","mdate","yearThen","parseInt","monthThen","dayThen","floor","validateSex","sex","validateQuestionType","validatePurpose","purpose","validateDisease","trim","topicData","createTopic","newTopicForm","NewTopic_FormItem","NewTopic_TextArea","input_number_default","min","date_picker_default","ManageTopic","library","add","faEnvelope","faKey","faComments","faQuestion","faTrashAlt","faUserCircle","Content","App","handleLoading","ele","getElementById","classList","outerHTML","loadCurrentUser","handleLogin","config","top","duration","redirectTo","notificationType","removeItem","layout_default","src_common_AppHeader","background","Switch","exact","path","admin_RequestRemove","home_Home","Topic_Topic","user_login_Login","user_signup_Signup","user_profile_Profile","EditProfile_EditProfile","NewTopic_NewTopic","common_PrivateRoute","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","BrowserRouter","src_app_App","URL","process","origin","addEventListener","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.1ff56487.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/header-logo.98d73a69.png\";","export const API_BASE_URL = 'https://health-qa-api.herokuapp.com/api';\r\n// export const API_BASE_URL = 'http://localhost:8080/api';\r\n//export const API_BASE_URL = '/api';\r\nexport const ACCESS_TOKEN = 'accessToken';\r\n\r\nexport const NAME_MIN_LENGTH = 2;\r\nexport const NAME_MAX_LENGTH = 40;\r\n\r\nexport const USERNAME_MIN_LENGTH = 5;\r\nexport const USERNAME_MAX_LENGTH = 20;\r\n\r\nexport const EMAIL_MAX_LENGTH = 50;\r\n\r\nexport const PASSWORD_MIN_LENGTH = 8;\r\nexport const PASSWORD_MAX_LENGTH = 26;\r\n","import { API_BASE_URL, ACCESS_TOKEN } from '../constants';\r\n\r\nconst request = (options) => {\r\n    const headers = new Headers({\r\n        'Content-Type': 'application/json',\r\n    })\r\n\r\n    if (localStorage.getItem(ACCESS_TOKEN)) {\r\n        headers.append('Authorization', 'Bearer ' + localStorage.getItem(ACCESS_TOKEN))\r\n    }\r\n\r\n    const defaults = { headers: headers };\r\n    options = Object.assign({}, defaults, options);\r\n    return fetch(options.url, options)\r\n        .then(response =>\r\n            response.json().then(json => {\r\n                if (!response.ok) {\r\n                    return Promise.reject(json);\r\n                }\r\n                return json;\r\n            })\r\n        );\r\n};\r\n\r\nexport function getTopic(topicId) {\r\n    return request({\r\n        url: API_BASE_URL + \"/topic/\" + topicId,\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function getManageTopic() {\r\n    return request({\r\n        url: API_BASE_URL + \"/admin/topic/\",\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function reportComment(id) {\r\n    return request({\r\n        url: API_BASE_URL + \"/comment/report/\" + id,\r\n        method: 'PUT'\r\n    });\r\n}\r\n\r\nexport function reportTopic(id) {\r\n    return request({\r\n        url: API_BASE_URL + \"/topic/report/\" + id,\r\n        method: 'PUT'\r\n    });\r\n}\r\n\r\nexport function deleteComment(id) {\r\n    return request({\r\n        url: API_BASE_URL + \"/admin/report/comment/\" + id,\r\n        method: 'PUT'\r\n    });\r\n}\r\n\r\nexport function deleteTopic(id) {\r\n    return request({\r\n        url: API_BASE_URL + \"/admin/report/topic/\" + id,\r\n        method: 'PUT'\r\n    });\r\n}\r\n\r\nexport function deleteUser(username) {\r\n    return request({\r\n        url: API_BASE_URL + \"/admin/users/delete/\" + username,\r\n        method: 'PUT'\r\n    });\r\n}\r\n\r\nexport function getReportTopic() {\r\n    return request({\r\n        url: API_BASE_URL + \"/admin/report/topic\",\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function getReportComment() {\r\n    return request({\r\n        url: API_BASE_URL + \"/admin/report/comment\",\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function getUsers() {\r\n    return request({\r\n        url: API_BASE_URL + \"/admin/users\",\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function getReports() {\r\n    return request({\r\n        url: API_BASE_URL + \"/admin/report/all\",\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function createTopic(topicData) {\r\n    return request({\r\n        url: API_BASE_URL + \"/topic\",\r\n        method: 'POST',\r\n        body: JSON.stringify(topicData)\r\n    });\r\n}\r\n\r\nexport function search(q) {\r\n    return request({\r\n        url: API_BASE_URL + \"/topic/search?q=\" + q,\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function createComment(commentData, topicId) {\r\n    topicId = topicId || -10\r\n    return request({\r\n        url: API_BASE_URL + \"/comment?id=\" + topicId,\r\n        method: 'POST',\r\n        body: JSON.stringify(commentData)\r\n    });\r\n}\r\n\r\nexport function login(loginRequest) {\r\n    return request({\r\n        url: API_BASE_URL + \"/auth/signin\",\r\n        method: 'POST',\r\n        body: JSON.stringify(loginRequest)\r\n    });\r\n}\r\n\r\nexport function signup(signupRequest) {\r\n    return request({\r\n        url: API_BASE_URL + \"/auth/signup\",\r\n        method: 'POST',\r\n        body: JSON.stringify(signupRequest)\r\n    });\r\n}\r\n\r\nexport function signupAdmin(signupRequest) {\r\n    return request({\r\n        url: API_BASE_URL + \"/admin/auth/signup/admin\",\r\n        method: 'POST',\r\n        body: JSON.stringify(signupRequest)\r\n    });\r\n}\r\n\r\nexport function signupDoctor(signupRequest) {\r\n    return request({\r\n        url: API_BASE_URL + \"/admin/auth/signup/doctor\",\r\n        method: 'POST',\r\n        body: JSON.stringify(signupRequest)\r\n    });\r\n}\r\n\r\nexport function checkUsernameAvailability(username) {\r\n    return request({\r\n        url: API_BASE_URL + \"/user/checkUsernameAvailability?username=\" + username,\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function checkEmailAvailability(email) {\r\n    return request({\r\n        url: API_BASE_URL + \"/user/checkEmailAvailability?email=\" + email,\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\n\r\nexport function getCurrentUser() {\r\n    if (!localStorage.getItem(ACCESS_TOKEN)) {\r\n        // console.log(\"No access token set.\")\r\n        // return null;\r\n    }\r\n    // console.log(localStorage.getItem(ACCESS_TOKEN))\r\n    return request({\r\n        url: API_BASE_URL + \"/user/me\",\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function getUserProfile(username) {\r\n    return request({\r\n        url: API_BASE_URL + \"/profile/\" + username,\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function getUserTopics() {\r\n    return request({\r\n        url: API_BASE_URL + \"/profile/topic\",\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function getUserAnsTopics() {\r\n    return request({\r\n        url: API_BASE_URL + \"/profile/comment\",\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function sendContactUs(contactUsData) {\r\n    return request({\r\n        url: API_BASE_URL + \"/contactus\",\r\n        method: 'POST',\r\n        body: JSON.stringify(contactUsData)\r\n    });\r\n}","import React, { Component } from 'react';\nimport { login } from '../../util/APIUtils';\nimport './Login.css';\nimport { Link } from 'react-router-dom';\nimport { ACCESS_TOKEN } from '../../constants';\n\nimport { Form, Input, Button, Icon, notification } from 'antd';\nconst FormItem = Form.Item;\n\nclass Login extends Component {\n    constructor(props) {\n        super(props)\n\n        if (this.props.isAuthenticated) {\n            this.props.history.push(\"/new-topic\");\n        }\n    }\n    render() {\n        const AntWrappedLoginForm = Form.create()(LoginForm)\n        return (\n            <div className=\"login-container\">\n                <h1 className=\"page-title\">Login</h1>\n                <div className=\"login-content\">\n                    <AntWrappedLoginForm onLogin={this.props.onLogin} />\n                </div>\n            </div>\n        );\n    }\n}\n\nclass LoginForm extends Component {\n    constructor(props) {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                const loginRequest = Object.assign({}, values);\n                login(loginRequest)\n                    .then(response => {\n                        localStorage.setItem(ACCESS_TOKEN, response.accessToken);\n                        this.props.onLogin();\n                    }).catch(error => {\n                        if (error.status === 401) {\n                            notification.error({\n                                message: 'Health QA',\n                                description: 'Your Username or Password is incorrect. Please try again!'\n                            });\n                        } else {\n                            notification.error({\n                                message: 'Health QA',\n                                description: error.message || 'Sorry! Something went wrong. Please try again!'\n                            });\n                        }\n                    });\n            }\n        });\n    }\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                <FormItem>\n                    {getFieldDecorator('usernameOrEmail', {\n                        rules: [{ required: true, message: 'Please input your username or email!' }],\n                    })(\n                        <Input\n                            prefix={<Icon type=\"user\" />}\n                            size=\"large\"\n                            name=\"usernameOrEmail\"\n                            placeholder=\"Username or Email\" />\n                    )}\n                </FormItem>\n                <FormItem>\n                    {getFieldDecorator('password', {\n                        rules: [{ required: true, message: 'Please input your Password!' }],\n                    })(\n                        <Input\n                            prefix={<Icon type=\"lock\" />}\n                            size=\"large\"\n                            name=\"password\"\n                            type=\"password\"\n                            placeholder=\"Password\" />\n                    )}\n                </FormItem>\n                <FormItem>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\" className=\"login-form-button\">Login</Button>\n                    Or <Link to=\"/signup\">register now!</Link>\n                </FormItem>\n            </Form>\n        );\n    }\n}\n\n\nexport default Login;","import React, { Component } from 'react';\nimport { signup, checkUsernameAvailability, checkEmailAvailability } from '../../util/APIUtils';\nimport './Signup.css';\nimport { Link } from 'react-router-dom';\nimport {\n    NAME_MIN_LENGTH, NAME_MAX_LENGTH,\n    USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH,\n    EMAIL_MAX_LENGTH,\n    PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH\n} from '../../constants';\n\nimport { Form, Input, Button, notification } from 'antd';\nconst FormItem = Form.Item;\n\nclass Signup extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            firstname: {\n                value: ''\n            },\n            lastname: {\n                value: ''\n            },\n            username: {\n                value: ''\n            },\n            email: {\n                value: ''\n            },\n            password: {\n                value: ''\n            }\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.validateUsernameAvailability = this.validateUsernameAvailability.bind(this);\n        this.validateEmailAvailability = this.validateEmailAvailability.bind(this);\n        this.isFormInvalid = this.isFormInvalid.bind(this);\n    }\n\n    componentDidMount() {\n        if (this.props.isAuthenticated) {\n            this.props.history.push(\"/\");\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.props.isAuthenticated) {\n            this.props.history.goBack();\n        }\n    }\n\n    handleInputChange(event, validationFun) {\n        const target = event.target;\n        const inputName = target.name;\n        const inputValue = target.value;\n\n        this.setState({\n            [inputName]: {\n                value: inputValue,\n                ...validationFun(inputValue)\n            }\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        const signupRequest = {\n            firstname: this.state.firstname.value,\n            lastname: this.state.lastname.value,\n            email: this.state.email.value,\n            username: this.state.username.value,\n            password: this.state.password.value\n        };\n        signup(signupRequest)\n            .then(response => {\n                notification.success({\n                    message: 'Health QA',\n                    description: \"Thank you! You're successfully registered. Please Login to continue!\",\n                });\n                this.props.history.push(\"/login\");\n            }).catch(error => {\n                notification.error({\n                    message: 'Health QA',\n                    description: error.message || 'Sorry! Something went wrong. Please try again!'\n                });\n            });\n    }\n\n    isFormInvalid() {\n        return !(this.state.firstname.validateStatus === 'success' &&\n            this.state.lastname.validateStatus === 'success' &&\n            this.state.username.validateStatus === 'success' &&\n            this.state.email.validateStatus === 'success' &&\n            this.state.password.validateStatus === 'success'\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"signup-container\">\n                <h1 className=\"page-title\">Sign Up</h1>\n                <div className=\"signup-content\">\n                    <Form onSubmit={this.handleSubmit} className=\"signup-form\">\n                        <FormItem\n                            label=\"First Name\"\n                            validateStatus={this.state.firstname.validateStatus}\n                            help={this.state.firstname.errorMsg}>\n                            <Input\n                                size=\"large\"\n                                name=\"firstname\"\n                                autoComplete=\"off\"\n                                placeholder=\"ชื่อ\"\n                                value={this.state.firstname.value}\n                                onChange={(event) => this.handleInputChange(event, this.validateName)} />\n                        </FormItem>\n                        <FormItem\n                            label=\"Last Name\"\n                            validateStatus={this.state.lastname.validateStatus}\n                            help={this.state.lastname.errorMsg}>\n                            <Input\n                                size=\"large\"\n                                name=\"lastname\"\n                                autoComplete=\"off\"\n                                placeholder=\"นามสกุล\"\n                                value={this.state.lastname.value}\n                                onChange={(event) => this.handleInputChange(event, this.validateName)} />\n                        </FormItem>\n                        <FormItem label=\"Username\"\n                            hasFeedback\n                            validateStatus={this.state.username.validateStatus}\n                            help={this.state.username.errorMsg}>\n                            <Input\n                                size=\"large\"\n                                name=\"username\"\n                                autoComplete=\"off\"\n                                placeholder=\"A unique username\"\n                                value={this.state.username.value}\n                                onBlur={this.validateUsernameAvailability}\n                                onChange={(event) => this.handleInputChange(event, this.validateUsername)} />\n                        </FormItem>\n                        <FormItem\n                            label=\"Email\"\n                            hasFeedback\n                            validateStatus={this.state.email.validateStatus}\n                            help={this.state.email.errorMsg}>\n                            <Input\n                                size=\"large\"\n                                name=\"email\"\n                                type=\"email\"\n                                autoComplete=\"off\"\n                                placeholder=\"Your email\"\n                                value={this.state.email.value}\n                                onBlur={this.validateEmailAvailability}\n                                onChange={(event) => this.handleInputChange(event, this.validateEmail)} />\n                        </FormItem>\n                        <FormItem\n                            label=\"Password\"\n                            validateStatus={this.state.password.validateStatus}\n                            help={this.state.password.errorMsg}>\n                            <Input\n                                size=\"large\"\n                                name=\"password\"\n                                type=\"password\"\n                                autoComplete=\"off\"\n                                placeholder=\"A password between 8 to 26 characters\"\n                                value={this.state.password.value}\n                                onChange={(event) => this.handleInputChange(event, this.validatePassword)} />\n                        </FormItem>\n                        <FormItem>\n                            <Button type=\"primary\"\n                                htmlType=\"submit\"\n                                size=\"large\"\n                                className=\"signup-form-button\"\n                                disabled={this.isFormInvalid()}>Sign up</Button>\n                            Already registed? <Link to=\"/login\">Login now!</Link>\n                        </FormItem>\n                    </Form>\n                </div>\n            </div>\n        );\n    }\n\n    // Validation Functions\n\n    validateName = (name) => {\n        if (name.length < NAME_MIN_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Name is too short (Minimum ${NAME_MIN_LENGTH} characters needed.)`\n            }\n        } else if (name.length > NAME_MAX_LENGTH) {\n            return {\n                validationStatus: 'error',\n                errorMsg: `Name is too long (Maximum ${NAME_MAX_LENGTH} characters allowed.)`\n            }\n        } else {\n            return {\n                validateStatus: 'success',\n                errorMsg: null,\n            };\n        }\n    }\n\n    validateEmail = (email) => {\n        if (!email) {\n            return {\n                validateStatus: 'error',\n                errorMsg: 'Email may not be empty'\n            }\n        }\n\n        const EMAIL_REGEX = RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');\n        if (!EMAIL_REGEX.test(email)) {\n            return {\n                validateStatus: 'error',\n                errorMsg: 'Email not valid'\n            }\n        }\n\n        if (email.length > EMAIL_MAX_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Email is too long (Maximum ${EMAIL_MAX_LENGTH} characters allowed)`\n            }\n        }\n\n        return {\n            validateStatus: null,\n            errorMsg: null\n        }\n    }\n\n    validateUsername = (username) => {\n        if (username.length < USERNAME_MIN_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Username is too short (Minimum ${USERNAME_MIN_LENGTH} characters needed.)`\n            }\n        } else if (username.length > USERNAME_MAX_LENGTH) {\n            return {\n                validationStatus: 'error',\n                errorMsg: `Username is too long (Maximum ${USERNAME_MAX_LENGTH} characters allowed.)`\n            }\n        } else {\n            return {\n                validateStatus: null,\n                errorMsg: null\n            }\n        }\n    }\n\n    validateUsernameAvailability() {\n        // First check for client side errors in username\n        const usernameValue = this.state.username.value;\n        const usernameValidation = this.validateUsername(usernameValue);\n\n        if (usernameValidation.validateStatus === 'error') {\n            this.setState({\n                username: {\n                    value: usernameValue,\n                    ...usernameValidation\n                }\n            });\n            return;\n        }\n\n        this.setState({\n            username: {\n                value: usernameValue,\n                validateStatus: 'validating',\n                errorMsg: null\n            }\n        });\n\n        checkUsernameAvailability(usernameValue)\n            .then(response => {\n                if (response.available) {\n                    this.setState({\n                        username: {\n                            value: usernameValue,\n                            validateStatus: 'success',\n                            errorMsg: null\n                        }\n                    });\n                } else {\n                    this.setState({\n                        username: {\n                            value: usernameValue,\n                            validateStatus: 'error',\n                            errorMsg: 'This username is already taken'\n                        }\n                    });\n                }\n            }).catch(error => {\n                // Marking validateStatus as success, Form will be recchecked at server\n                this.setState({\n                    username: {\n                        value: usernameValue,\n                        validateStatus: 'success',\n                        errorMsg: null\n                    }\n                });\n            });\n    }\n\n    validateEmailAvailability() {\n        // First check for client side errors in email\n        const emailValue = this.state.email.value;\n        const emailValidation = this.validateEmail(emailValue);\n\n        if (emailValidation.validateStatus === 'error') {\n            this.setState({\n                email: {\n                    value: emailValue,\n                    ...emailValidation\n                }\n            });\n            return;\n        }\n\n        this.setState({\n            email: {\n                value: emailValue,\n                validateStatus: 'validating',\n                errorMsg: null\n            }\n        });\n\n        checkEmailAvailability(emailValue)\n            .then(response => {\n                if (response.available) {\n                    this.setState({\n                        email: {\n                            value: emailValue,\n                            validateStatus: 'success',\n                            errorMsg: null\n                        }\n                    });\n                } else {\n                    this.setState({\n                        email: {\n                            value: emailValue,\n                            validateStatus: 'error',\n                            errorMsg: 'This Email is already registered'\n                        }\n                    });\n                }\n            }).catch(error => {\n                // Marking validateStatus as success, Form will be recchecked at server\n                this.setState({\n                    email: {\n                        value: emailValue,\n                        validateStatus: 'success',\n                        errorMsg: null\n                    }\n                });\n            });\n    }\n\n    validatePassword = (password) => {\n        if (password.length < PASSWORD_MIN_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Password is too short (Minimum ${PASSWORD_MIN_LENGTH} characters needed.)`\n            }\n        } else if (password.length > PASSWORD_MAX_LENGTH) {\n            return {\n                validationStatus: 'error',\n                errorMsg: `Password is too long (Maximum ${PASSWORD_MAX_LENGTH} characters allowed.)`\n            }\n        } else {\n            return {\n                validateStatus: 'success',\n                errorMsg: null,\n            };\n        }\n    }\n\n}\n\nexport default Signup;","const colors = [\n    '#F44336', '#e91e63', '#9c27b0', '#673ab7',\n    '#ff9800', '#ff5722', '#795548', '#607d8b',\n    '#3f51b5', '#2196F3', '#00bcd4', '#009688',\n    '#2196F3', '#32c787', '#00BCD4', '#ff5652',\n    '#ffc107', '#ff85af', '#FF9800', '#39bbb0',\n    '#4CAF50', '#ffeb3b', '#ffc107',\n];\n\nexport function getAvatarColor(username) {\n    username = username.substr(0, 6);\n\n    var hash = 0;\n    for (var i = 0; i < username.length; i++) {\n        hash = 31 * hash + username.charCodeAt(i);\n    }\n    var index = Math.abs(hash % colors.length);\n    return colors[index];\n}","import React, { Component } from 'react';\nimport './NotFound.css';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'antd';\n\nclass NotFound extends Component {\n    render() {\n        return (\n            <div className=\"page-not-found\">\n                <h1 className=\"title\">\n                    404\n                </h1>\n                <div className=\"desc\">\n                    The Page you're looking for was not found.\n                </div>\n                <Link to=\"/\"><Button className=\"go-back-btn\" type=\"primary\" size=\"large\">Go Back</Button></Link>\n            </div>\n        );\n    }\n}\n\nexport default NotFound;","import React, { Component } from 'react';\nimport './ServerError.css';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'antd';\n\nclass ServerError extends Component {\n    render() {\n        return (\n            <div className=\"server-error-page\">\n                <h1 className=\"server-error-title\">\n                    500\n                </h1>\n                <div className=\"server-error-desc\">\n                    Oops! Something went wrong at our Server. Why don't you go back?\n                </div>\n                <Link to=\"/\"><Button className=\"server-error-go-back-btn\" type=\"primary\" size=\"large\">Go Back</Button></Link>\n            </div>\n        );\n    }\n}\n\nexport default ServerError;","import React from 'react';\r\nimport { ListGroup, ListGroupItem, ListGroupItemHeading, ListGroupItemText } from 'reactstrap';\r\n// import { Link } from 'react-router-dom';\r\nimport Skeleton from 'react-loading-skeleton';\r\n\r\nconst QuestionsListLoading = () => (\r\n  <div>\r\n    < ListGroup>\r\n      <ListGroupItem>\r\n        <ListGroupItemHeading >{<Skeleton width='40%' />}</ListGroupItemHeading>\r\n        <ListGroupItemText>\r\n          {<Skeleton count={2} />}\r\n        </ListGroupItemText>\r\n      </ListGroupItem>\r\n    </ListGroup >\r\n    < ListGroup>\r\n      <ListGroupItem>\r\n        <ListGroupItemHeading >{<Skeleton width='40%' />}</ListGroupItemHeading>\r\n        <ListGroupItemText>\r\n          {<Skeleton count={2} />}\r\n        </ListGroupItemText>\r\n      </ListGroupItem>\r\n    </ListGroup >\r\n    < ListGroup>\r\n      <ListGroupItem>\r\n        <ListGroupItemHeading >{<Skeleton width='40%' />}</ListGroupItemHeading>\r\n        <ListGroupItemText>\r\n          {<Skeleton count={2} />}\r\n        </ListGroupItemText>\r\n      </ListGroupItem>\r\n    </ListGroup >\r\n    < ListGroup>\r\n      <ListGroupItem>\r\n        <ListGroupItemHeading >{<Skeleton width='40%' />}</ListGroupItemHeading>\r\n        <ListGroupItemText>\r\n          {<Skeleton count={2} />}\r\n        </ListGroupItemText>\r\n      </ListGroupItem>\r\n    </ListGroup >\r\n    < ListGroup>\r\n      <ListGroupItem>\r\n        <ListGroupItemHeading >{<Skeleton width='40%' />}</ListGroupItemHeading>\r\n        <ListGroupItemText>\r\n          {<Skeleton count={2} />}\r\n        </ListGroupItemText>\r\n      </ListGroupItem>\r\n    </ListGroup >\r\n  </div>\r\n);\r\nexport default QuestionsListLoading;","import React from 'react';\r\nimport { Tabs } from \"@yazanaabed/react-tabs\";\r\nimport { ListGroup, ListGroupItem, ListGroupItemHeading, ListGroupItemText, Badge, Label } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport QuestionsListLoading from '../../common/QuestionsListLoading';\r\nimport { getUserTopics, getUserAnsTopics } from '../../util/APIUtils';\r\n\r\n\r\nclass UserQuestionTabs extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            userTopics: [],\r\n            userAnsTopics: [],\r\n            isLoading: false,\r\n            error: null\r\n        }\r\n\r\n        this.loadUserTopics = this.loadUserTopics.bind(this);\r\n    }\r\n\r\n    handleSelect(e) {\r\n        // console.log('Selected tab: ' + e.Tabs.activeTab);\r\n    }\r\n\r\n    loadUserTopics() {\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n\r\n        getUserTopics()\r\n            .then(response => {\r\n                this.setState({\r\n                    userTopics: response,\r\n                    isLoading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.status === 404) {\r\n                    this.setState({\r\n                        notFound: true,\r\n                        isLoading: false\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        serverError: true,\r\n                        isLoading: false\r\n                    });\r\n                }\r\n            });\r\n\r\n        getUserAnsTopics()\r\n            .then(response => {\r\n                this.setState({\r\n                    userAnsTopics: response,\r\n                    isLoading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.status === 404) {\r\n                    this.setState({\r\n                        notFound: true,\r\n                        isLoading: false\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        serverError: true,\r\n                        isLoading: false\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ isLoading: true });\r\n        this.loadUserTopics();\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, error } = this.state;\r\n\r\n        if (error) {\r\n            return (\r\n                <div style={{ textAlign: 'center' }}>\r\n                    <h1>We're sorry, but {error.message || \"Something went wrong. Please try again!\"}</h1>\r\n                    <p>If you are the application owner check the logs for more information.</p>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (isLoading) {\r\n            return (\r\n                <div>\r\n                    <Tabs activeTab={{ id: \"tab1\" }}>\r\n                        <Tabs.Tab id=\"tab1\" title=\"คำถามที่ฉันตั้ง\" ><div className=\"mt-3\" > <QuestionsListLoading /></div> </Tabs.Tab>\r\n                        <Tabs.Tab id=\"tab2\" title=\"คำถามที่ฉันตอบ\"><div className=\"mt-3\"> <QuestionsListLoading /></div> </Tabs.Tab>\r\n                    </Tabs>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n\r\n            <div>\r\n                <Tabs\r\n                    activeTab={{\r\n                        id: 'tab1'\r\n                    }}\r\n\r\n                >\r\n                    <React.Fragment>\r\n                        <Tabs.Tab id=\"tab1\" title=\"คำถามที่ฉันตั้ง\" >\r\n                            <div className=\"mt-3\" >\r\n                                {\r\n                                    this.state.userTopics.map(\r\n                                        (question, index) =>\r\n                                            < ListGroup key={index} >\r\n                                                <ListGroupItem>\r\n                                                    <ListGroupItemHeading ><Link to={\"/topic/\" + question.topicId} className=\"question-header\">{question.topicName}</Link><Badge style={{ marginLeft: '2%' }} pill> ตอบแล้ว {question.answerCount}</Badge></ListGroupItemHeading>\r\n                                                    <Label style={{ color: '#6C757D' }}> <FontAwesomeIcon icon=\"question\" size=\"sm\" />{\"\" + question.questionType}</Label>\r\n                                                    <ListGroupItemText>\r\n                                                        <Link to={\"topic/\" + question.topicId} className=\"question-body\">\r\n                                                            {question.topicText}\r\n                                                        </Link>\r\n                                                    </ListGroupItemText>\r\n                                                </ListGroupItem>\r\n                                            </ListGroup >\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        </Tabs.Tab>\r\n                        <Tabs.Tab id=\"tab2\" title=\"คำถามที่ฉันตอบ\">\r\n                            <div className=\"mt-3\">\r\n                                {\r\n                                    this.state.userAnsTopics.map(\r\n                                        (question, index) =>\r\n                                            < ListGroup key={index}>\r\n                                                <ListGroupItem>\r\n                                                    <ListGroupItemHeading ><Link to={\"/topic/\" + question.topicId} className=\"question-header\">{question.topicName}</Link><Badge style={{ marginLeft: '2%' }} pill> ตอบแล้ว {question.answerCount}</Badge></ListGroupItemHeading>\r\n                                                    <Label style={{ color: '#6C757D' }}> <FontAwesomeIcon icon=\"question\" size=\"sm\" />{\"\" + question.questionType}</Label>\r\n                                                    <ListGroupItemText>\r\n                                                        <Link to={\"/topic/\" + question.topicId} className=\"question-body\">\r\n                                                            {question.topicText}\r\n                                                        </Link>\r\n                                                    </ListGroupItemText>\r\n                                                </ListGroupItem>\r\n                                            </ListGroup >\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        </Tabs.Tab>\r\n                    </React.Fragment>\r\n                </Tabs>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default UserQuestionTabs;","import React, { Component } from 'react';\r\n// import PollList from '../../poll/PollList';\r\nimport { getUserProfile } from '../../util/APIUtils';\r\nimport { Avatar, Spin } from 'antd';\r\nimport { getAvatarColor } from '../../util/Colors';\r\n// import { formatDate } from '../../util/Helpers';\r\n// import LoadingIndicator from '../../common/LoadingIndicator';\r\nimport './Profile.css';\r\nimport NotFound from '../../common/NotFound';\r\nimport ServerError from '../../common/ServerError';\r\nimport UserQuestionTabs from './UserQuestionTabs';\r\nimport Skeleton from 'react-loading-skeleton';\r\nimport { Card, CardBody } from 'reactstrap';\r\n\r\n// const TabPane = Tabs.TabPane;\r\n\r\nclass Profile extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: null,\r\n            isLoading: false\r\n        }\r\n        this.loadUserProfile = this.loadUserProfile.bind(this);\r\n    }\r\n\r\n    loadUserProfile(username) {\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n\r\n        getUserProfile(username)\r\n            .then(response => {\r\n                this.setState({\r\n                    user: response,\r\n                    isLoading: false\r\n                });\r\n            }).catch(error => {\r\n                // console.log(\"---------->\"+error.status)\r\n                if (error.status === 404) {\r\n                    this.setState({\r\n                        notFound: true,\r\n                        isLoading: false\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        serverError: true,\r\n                        isLoading: false\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    componentDidMount() {\r\n        const username = this.props.match.params.username;\r\n        this.loadUserProfile(username);\r\n    }\r\n\r\n    componentDidUpdate(nextProps) {\r\n        if (this.props.match.params.username !== nextProps.match.params.username) {\r\n            this.loadUserProfile(nextProps.match.params.username);\r\n        }\r\n    }\r\n\r\n    handleButtonClick = () => {\r\n        this.props.history.push(\"/edit/users/\" + this.props.match.params.username);\r\n    }\r\n\r\n    render() {\r\n        // if (this.state.isLoading) {\r\n        //     return <LoadingIndicator />;\r\n        // }\r\n\r\n        if (this.state.notFound) {\r\n            return <NotFound />;\r\n        }\r\n\r\n        if (this.state.serverError) {\r\n            return <ServerError />;\r\n        }\r\n\r\n\r\n\r\n        return (\r\n            <div className=\"profile\">\r\n                <Spin spinning={this.state.user ? false : true} size=\"large\" delay={200}>\r\n                    {\r\n                        // this.state.user ? (\r\n                        <div className=\"user-profile\">\r\n                            <Card outline color=\"info\">\r\n                                <CardBody>\r\n                                    <div className=\"user-details\">\r\n                                        <div className=\"user-avatar\">\r\n                                            <Avatar className=\"user-avatar-circle\" style={{ backgroundColor: getAvatarColor(!this.state.user ? 'wait' : this.state.user.username), fontSize: '2em' }}>\r\n                                                {!this.state.user ? 'x' : this.state.user.username[0]}\r\n                                            </Avatar>\r\n                                        </div>\r\n                                        <div className=\"user-summary\">\r\n                                            <div className=\"full-name\">{!this.state.user ? <Skeleton width=\"300px\" /> : this.state.user.firstname + \" \" + this.state.user.lastname}</div>\r\n                                            <div className=\"username\">{!this.state.user ? <Skeleton width=\"250px\" /> : \"@\" + this.state.user.username}</div>\r\n                                            <div className=\"user-joined\">{!this.state.user ? <Skeleton width=\"200px\" /> : this.state.user.email}</div>\r\n                                            <div className=\"mt-3\">\r\n                                                {/* {!this.state.user ? <Skeleton width=\"100px\" /> : <Button type=\"primary\" icon=\"edit\" ghost onClick={this.handleButtonClick}>แก้ไขข้อมูล</Button>} */}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </CardBody>\r\n                            </Card>\r\n                            <div id=\"card-margin-top-bottom\">\r\n                                <Card outline color=\"info\">\r\n                                    <CardBody>\r\n                                        <UserQuestionTabs />\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </div>\r\n                        </div>\r\n                        // ) : null\r\n                    }\r\n                </Spin>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Profile;","import React, { Component } from 'react';\nimport {\n  Link,\n  withRouter\n} from 'react-router-dom';\nimport './AppHeader.css';\nimport '../css/style.css';\n// import pollIcon from '../poll.svg';\nimport { Menu, Dropdown, Icon } from 'antd';\nimport headerLogo from '../img/header-logo.png';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport {\n  Navbar\n} from 'reactstrap';\n\nclass AppHeader extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleMenuClick = this.handleMenuClick.bind(this);\n  }\n\n  handleMenuClick({ key }) {\n    if (key === \"logout\") {\n      this.props.onLogout();\n    }\n  }\n\n  render() {\n    let menuItems;\n    let navTop;\n\n\n\n    if (this.props.currentUser) {\n      navTop = [\n        <Navbar dark expand=\"md\" key={1} className=\"navbar-default\" >\n          <div className=\"top-logo\"><Link to=\"/\"><img src={headerLogo} className=\"inverted\" alt=\"Header Logo\" height=\"60\" /></Link></div>\n        </Navbar>\n      ]\n\n      if (this.props.currentUser.authorities[0].authority === \"USER\" || this.props.currentUser.authorities[0].authority === \"S_USER\") {\n        menuItems = [\n          <Menu.Item key={1}>\n            <Link to=\"/\">หน้าหลัก</Link>\n          </Menu.Item>,\n          <Menu.Item key={2}>\n            <Link to=\"/new-topic\">ถามหมอ</Link>\n          </Menu.Item>,\n          <Menu.Item key={3}>\n            <Link to=\"/contactus\">ติดต่อเรา</Link>\n          </Menu.Item>,\n          <Menu.Item key={4} className=\"profile-menu\">\n            <ProfileDropdownMenu\n              currentUser={this.props.currentUser}\n              handleMenuClick={this.handleMenuClick} />\n          </Menu.Item>\n        ];\n\n      } else if (this.props.currentUser.authorities[0].authority === \"ADMIN\") {\n\n        navTop = [\n          <Navbar dark expand=\"md\" key={1} className=\"navbar-admin\" >\n            <div className=\"top-logo\"><Link to=\"/\"><img src={headerLogo} className=\"inverted\" alt=\"Header Logo\" height=\"60\" /></Link></div>\n          </Navbar>\n        ]\n\n        menuItems = [\n\n          <Menu.Item key={2}>\n            <Link to=\"/\">คำขอแจ้งลบ</Link>\n          </Menu.Item>,\n          <Menu.Item key={3}>\n            <Link to=\"/admin/manage/user\">จัดการผู้ใช้งาน</Link>\n          </Menu.Item>,\n          <Menu.Item key={4}>\n            <Link to=\"/admin/manage/topic\">จัดการคำถาม</Link>\n          </Menu.Item>,\n          <Menu.Item key={5} className=\"profile-menu\">\n            <ProfileDropdownMenu\n              currentUser={this.props.currentUser}\n              handleMenuClick={this.handleMenuClick} />\n          </Menu.Item>\n        ];\n      }\n    } else {\n      navTop = [\n        <Navbar dark expand=\"md\" className=\"navbar-default\" key={5}>\n          <div className=\"top-logo\"><Link to=\"/\"><img src={headerLogo} className=\"inverted\" alt=\"Header Logo\" height=\"60\" /></Link></div>\n        </Navbar>\n      ]\n\n      menuItems = [\n        <Menu.Item key={1}>\n          <Link to=\"/\">หน้าหลัก</Link>\n        </Menu.Item>,\n        <Menu.Item key={2}>\n          <Link to=\"/new-topic\">ถามหมอ</Link>\n        </Menu.Item>,\n        <Menu.Item key={3}>\n          <Link to=\"/contactus\">ติดต่อเรา</Link>\n        </Menu.Item>,\n        <Menu.Item key={4}>\n          <Link to=\"/login\">Login</Link>\n        </Menu.Item>,\n        <Menu.Item key={5}>\n          <Link to=\"/signup\">Signup</Link>\n        </Menu.Item>\n      ];\n    }\n\n    return (\n      <div>\n        <div className=\"app-header\">\n          {navTop}\n          <div className=\"container\">\n            <div className=\"app-title\" >\n              {this.props.currentUser ?\n                (this.props.currentUser.authorities[0].authority === \"ADMIN\" ?\n                  <Link to=\"/\">Health QA [Admin]</Link>\n                  : <Link to=\"/\">Health QA</Link>)\n                : <Link to=\"/\">Health QA</Link>\n              }\n            </div>\n            <Menu\n              className=\"app-menu\"\n              mode=\"horizontal\"\n              selectedKeys={[this.props.location.pathname]}\n              style={{ lineHeight: '64px' }} >\n              {menuItems}\n            </Menu>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction ProfileDropdownMenu(props) {\n  const dropdownMenu = (\n    <Menu onClick={props.handleMenuClick} className=\"profile-dropdown-menu\" key={1}>\n      {props.currentUser.authorities[0].authority !== \"ADMIN\" ? (\n        [\n          < Menu.Item key=\"user-info\" className=\"dropdown-item\" disabled>\n            {/* <Link to={`/users/${props.currentUser.username}`}> */}\n            <div className=\"user-full-name-info\">\n              {props.currentUser.firstname + \" \" + props.currentUser.lastname}\n            </div>\n            <div className=\"username-info\">\n              @{props.currentUser.username}\n            </div>\n            {/* </Link> */}\n          </Menu.Item>,\n          <Menu.Divider key={2} />,\n          <Menu.Item key=\"profile\" className=\"dropdown-item\">\n            <Link to={`/users/${props.currentUser.username}`}> <Icon type=\"user\" /> Profile</Link>\n          </Menu.Item>\n        ]\n      ) : null}\n      <Menu.Item key=\"logout\" className=\"dropdown-item\">\n        <Icon type=\"logout\" />Sign out\n      </Menu.Item>\n    </Menu >\n  );\n\n  return (\n    <Dropdown\n      overlay={dropdownMenu}\n      trigger={['click']}\n      getPopupContainer={() => document.getElementsByClassName('profile-menu')[0]}>\n      <a className=\"ant-dropdown-link\" href=\"/\">\n        {\n          props.currentUser.authorities[0].authority === \"ADMIN\" ?\n            <div>\n              {\"Hi, \" + props.currentUser.firstname + \" \" + props.currentUser.lastname} <Icon type=\"down\" style={{ marginRight: 0 }} />\n            </div>\n            : <div>\n              <Icon type=\"user\" className=\"nav-icon\" style={{ marginRight: 0 }} /> <Icon type=\"down\" />\n            </div>\n        }\n      </a>\n    </Dropdown>\n  );\n}\n\n\nexport default withRouter(AppHeader);","import React from 'react';\nimport { Spin, Icon } from 'antd';\n\nexport default function LoadingIndicator(props) {\n    const antIcon = <Icon type=\"loading-3-quarters\" style={{ fontSize: 30 }} spin />;\n    return (\n        <Spin indicator={antIcon} style = {{display: 'block', textAlign: 'center', marginTop: 30}} />\n    );\n}","import React from 'react';\r\nimport { Tabs } from \"@yazanaabed/react-tabs\";\r\nimport { ListGroup, ListGroupItem, ListGroupItemHeading, ListGroupItemText, Badge, Label } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport axios from 'axios';\r\nimport QuestionsListLoading from '../common/QuestionsListLoading';\r\nimport { Notification, message, Spin, Button, Icon } from 'antd';\r\nimport { API_BASE_URL } from '../constants';\r\nimport LoadingIndicator from '../common/LoadingIndicator';\r\nimport './style.css';\r\n\r\n\r\nclass QuestionTabs extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            topics: {\r\n                allTopics: [],\r\n                answeredTopics: [],\r\n                noAnswerTopic: []\r\n            },\r\n            page: 0,\r\n            size: 5,\r\n            last: true,\r\n            isLoading: false,\r\n            error: null\r\n        }\r\n    }\r\n\r\n    handleSelect(e) {\r\n        // console.log('Selected tab: ' + e.Tabs.activeTab);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadTopics();\r\n    }\r\n\r\n    handleLoadMore = () => {\r\n        this.loadTopics(this.state.page, this.state.size);\r\n        // console.log(this.state.page + \" <<>>\" + this.state.size)\r\n    }\r\n\r\n    loadTopics = (page = this.state.page, size = this.state.size) => {\r\n        this.setState({ isLoading: true });\r\n\r\n        axios.all([\r\n            axios.get(API_BASE_URL + '/topic/all?page=' + page + '&size=' + size),\r\n            axios.get(API_BASE_URL + '/topic/ans?page=' + page + '&size=' + size),\r\n            axios.get(API_BASE_URL + '/topic/noAns?page=' + page + '&size=' + size)\r\n        ])\r\n            .then(axios.spread((allTopicsRes, ansTopicsRes, noAnsTopicRes) => {\r\n                const allTopics = this.state.topics.allTopics.slice();\r\n                const ansTopics = this.state.topics.answeredTopics.slice();\r\n                const noAnsTopics = this.state.topics.noAnswerTopic.slice();\r\n\r\n                this.setState({\r\n                    topics: {\r\n                        allTopics: allTopics.concat(allTopicsRes.data.content),\r\n                        answeredTopics: ansTopics.concat(ansTopicsRes.data.content),\r\n                        noAnswerTopic: noAnsTopics.concat(noAnsTopicRes.data.content)\r\n                    },\r\n                    page: allTopicsRes.data.page,\r\n                    size: allTopicsRes.data.size,\r\n                    last: allTopicsRes.data.last,\r\n                    isLoading: false\r\n                })\r\n            }))\r\n            .catch(error => {\r\n                this.setState({ error, isLoading: false })\r\n                Notification.error({\r\n                    message: 'Health QA',\r\n                    description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, error } = this.state;\r\n\r\n        if (error) {\r\n            return (\r\n                <div style={{ textAlign: 'center' }}>\r\n                    <h1>We're sorry, but {error.message || \"Something went wrong. Please try again!\"}</h1>\r\n                    <p>If you are the application owner check the logs for more information.</p>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (isLoading) {\r\n            // message.loading('กำลังโหลดข้อมูล...', 0);\r\n            return (\r\n                <div>\r\n                    <Spin spinning={isLoading} size=\"large\">\r\n                        <Tabs activeTab={{ id: \"tab1\" }}>\r\n                            <Tabs.Tab id=\"tab1\" title=\"คำถามทั้งหมด\" ><div className=\"mt-3\" > <QuestionsListLoading /></div> </Tabs.Tab>\r\n                            <Tabs.Tab id=\"tab2\" title=\"คำถามที่ตอบแล้ว\"><div className=\"mt-3\"> <QuestionsListLoading /></div> </Tabs.Tab>\r\n                            <Tabs.Tab id=\"tab3\" title=\"คำถามที่ยังไม่ได้ตอบ\"> <div className=\"mt-3\"><QuestionsListLoading /></div></Tabs.Tab>\r\n                        </Tabs>\r\n                    </Spin>\r\n                </div>\r\n            );\r\n        } else {\r\n            message.destroy()\r\n        }\r\n        return (\r\n\r\n            <div>\r\n                <Tabs\r\n                    activeTab={{\r\n                        id: 'tab1'\r\n                    }}\r\n\r\n                >\r\n                    <React.Fragment>\r\n                        <Tabs.Tab id=\"tab1\" title=\"คำถามทั้งหมด\" >\r\n                            <div className=\"mt-3\" >\r\n                                {\r\n                                    this.state.topics.allTopics.map(\r\n                                        (question, index) =>\r\n                                            < ListGroup key={index} >\r\n                                                <ListGroupItem>\r\n                                                    <ListGroupItemHeading ><Link to={\"/topic/\" + question.topicId} className=\"question-header\">{question.topicName}</Link><Badge style={{ marginLeft: '2%' }} pill> ตอบแล้ว {question.answerCount}</Badge></ListGroupItemHeading>\r\n                                                    <Label style={{ color: '#6C757D' }}> <FontAwesomeIcon icon=\"question\" size=\"sm\" />{\"\" + question.questionType}</Label>\r\n                                                    <ListGroupItemText>\r\n                                                        <Link to={\"topic/\" + question.topicId} className=\"question-body\">\r\n                                                            {question.topicText}\r\n                                                        </Link>\r\n                                                    </ListGroupItemText>\r\n                                                </ListGroupItem>\r\n                                            </ListGroup >\r\n                                    )\r\n                                }\r\n\r\n                            </div>\r\n                            <div className=\"mt-3\" align=\"center\">\r\n                                {\r\n                                    !this.state.isLoading && this.state.topics.allTopics.length === 0 ? (\r\n                                        <div className=\"no-polls-found\">\r\n                                            <span>No Topic Found.</span>\r\n                                        </div>\r\n                                    ) : null\r\n                                }\r\n                                {\r\n                                    !this.state.isLoading && !this.state.last ? (\r\n                                        <div className=\"load-more-polls\">\r\n                                            <Button type=\"dashed\"  onClick={this.handleLoadMore} disabled={this.state.isLoading}>\r\n                                                <Icon type=\"plus\" /> Load more\r\n                            </Button>\r\n                                        </div>) : null\r\n                                }\r\n                                {\r\n                                    this.state.isLoading ?\r\n                                        <LoadingIndicator /> : null\r\n                                }\r\n                            </div>\r\n                        </Tabs.Tab>\r\n                        <Tabs.Tab id=\"tab2\" title=\"คำถามที่ตอบแล้ว\">\r\n                            <div className=\"mt-3\">\r\n                                {\r\n                                    this.state.topics.answeredTopics.map(\r\n                                        (question, index) =>\r\n                                            < ListGroup key={index}>\r\n                                                <ListGroupItem>\r\n                                                    <ListGroupItemHeading ><Link to={\"/topic/\" + question.topicId} className=\"question-header\">{question.topicName}</Link><Badge style={{ marginLeft: '2%' }} pill> ตอบแล้ว {question.answerCount}</Badge></ListGroupItemHeading>\r\n                                                    <Label style={{ color: '#6C757D' }}> <FontAwesomeIcon icon=\"question\" size=\"sm\" />{\"\" + question.questionType}</Label>\r\n                                                    <ListGroupItemText>\r\n                                                        <Link to={\"/topic/\" + question.topicId} className=\"question-body\">\r\n                                                            {question.topicText}\r\n                                                        </Link>\r\n                                                    </ListGroupItemText>\r\n                                                </ListGroupItem>\r\n                                            </ListGroup >\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <div className=\"mt-3\" align=\"center\">\r\n                                {\r\n                                    !this.state.isLoading && this.state.topics.allTopics.length === 0 ? (\r\n                                        <div className=\"no-polls-found\">\r\n                                            <span>No Topic Found.</span>\r\n                                        </div>\r\n                                    ) : null\r\n                                }\r\n                                {\r\n                                    !this.state.isLoading && !this.state.last ? (\r\n                                        <div className=\"load-more-polls\">\r\n                                            <Button type=\"dashed\" onClick={this.handleLoadMore} disabled={this.state.isLoading}>\r\n                                                <Icon type=\"plus\" /> Load more\r\n                            </Button>\r\n                                        </div>) : null\r\n                                }\r\n                                {\r\n                                    this.state.isLoading ?\r\n                                        <LoadingIndicator /> : null\r\n                                }\r\n                            </div>\r\n                        </Tabs.Tab>\r\n                        <Tabs.Tab id=\"tab3\" title=\"คำถามที่ยังไม่ได้ตอบ\">\r\n                            <div className=\"mt-3\">\r\n                                {\r\n                                    this.state.topics.noAnswerTopic.map(\r\n                                        (question, index) =>\r\n                                            < ListGroup key={index}>\r\n                                                <ListGroupItem>\r\n                                                    <ListGroupItemHeading ><Link to={\"/topic/\" + question.topicId} className=\"question-header\">{question.topicName}</Link><Badge style={{ marginLeft: '2%' }} pill> ตอบแล้ว {question.answerCount}</Badge></ListGroupItemHeading>\r\n                                                    <Label style={{ color: '#6C757D' }}> <FontAwesomeIcon icon=\"question\" size=\"sm\" />{\"\" + question.questionType}</Label>\r\n                                                    <ListGroupItemText>\r\n                                                        <Link to={\"/topic/\" + question.topicId} className=\"question-body\">\r\n                                                            {question.topicText}\r\n                                                        </Link>\r\n                                                    </ListGroupItemText>\r\n                                                </ListGroupItem>\r\n                                            </ListGroup >\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <div className=\"mt-3\" align=\"center\">\r\n                                {\r\n                                    !this.state.isLoading && this.state.topics.allTopics.length === 0 ? (\r\n                                        <div className=\"no-polls-found\">\r\n                                            <span>No Topic Found.</span>\r\n                                        </div>\r\n                                    ) : null\r\n                                }\r\n                                {\r\n                                    !this.state.isLoading && !this.state.last ? (\r\n                                        <div className=\"load-more-polls\">\r\n                                            <Button type=\"dashed\" onClick={this.handleLoadMore} disabled={this.state.isLoading}>\r\n                                                <Icon type=\"plus\" /> Load more\r\n                            </Button>\r\n                                        </div>) : null\r\n                                }\r\n                                {\r\n                                    this.state.isLoading ?\r\n                                        <LoadingIndicator /> : null\r\n                                }\r\n                            </div>\r\n                        </Tabs.Tab>\r\n                    </React.Fragment>\r\n                </Tabs>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default QuestionTabs;","import React from 'react';\r\n\r\nimport { Card, CardBody, Container, Jumbotron, ListGroup, ListGroupItem, ListGroupItemHeading, ListGroupItemText, Badge, Label } from 'reactstrap';\r\nimport QuestionTabs from './QuestionTabs';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport './style.css'\r\nimport { search } from '../util/APIUtils';\r\nimport { Spin } from 'antd';\r\n\r\nclass Home extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      q: '',\r\n      searchResult: [],\r\n      isLoading: false,\r\n      error: null,\r\n\r\n    }\r\n\r\n    this.timer = null;\r\n\r\n  }\r\n\r\n  handleSearch = () => {\r\n    // console.log(\"Test\")\r\n  }\r\n\r\n  // handleInputChange(event) {\r\n  //   const target = event.target;\r\n  //   const inputName = target.name;\r\n  //   const inputValue = target.value;\r\n  //   // console.log(inputName)\r\n  //   this.setState({\r\n  //     [inputName]: inputValue\r\n  //   }, console.log(this.state));\r\n  // }\r\n\r\n\r\n  handleInputChange(event) {\r\n    const target = event.target;\r\n    const inputValue = target.value;\r\n\r\n    clearTimeout(this.timer);\r\n    this.timer = setTimeout(this.handlesearch(inputValue), 5000)\r\n  }\r\n\r\n  handlesearch(event) {\r\n    // const target = event.target;\r\n    // const inputValue = target.value;\r\n\r\n    this.setState({\r\n      q: event,\r\n      isLoading: true,\r\n    })\r\n\r\n    search(event)\r\n      .then(response => {\r\n        console.log(response)\r\n        this.setState({\r\n          searchResult: response,\r\n          isLoading: false\r\n        });\r\n      }).catch(error => {\r\n        if (error.status === 404) {\r\n          this.setState({\r\n            error: true,\r\n            isLoading: false\r\n          });\r\n        } else {\r\n          this.setState({\r\n            error: true,\r\n            isLoading: false\r\n          });\r\n        }\r\n      });\r\n\r\n  }\r\n\r\n  render() {\r\n    const { error } = this.state;\r\n\r\n    if (error) {\r\n      return (\r\n        <div style={{ textAlign: 'center' }}>\r\n          <h1>We're sorry, but {error.message || \"Something went wrong. Please try again!\"}</h1>\r\n          <p>If you are the application owner check the logs for more information.</p>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      // Show Div Full Page => container-fluid\r\n      <div className=\"container-fluid mb-5\">\r\n        <Jumbotron fluid className=\"align-items-center\">\r\n          <Container fluid>\r\n            <div >\r\n              <fieldset className=\"field-container\">\r\n                <input type=\"text\" name=\"q\" onChange={(event) => this.handleInputChange(event)} placeholder=\"อาการแบบนี้ถือเป็น bipolar หรือไม่...\" className=\"field\" />\r\n                <div className=\"icons-container\">\r\n                  <div className=\"icon-search\" onClick={this.handleSearch} ></div>\r\n                </div>\r\n              </fieldset>\r\n            </div>\r\n          </Container>\r\n        </Jumbotron>\r\n\r\n        <Card outline color=\"info\">\r\n          <CardBody>\r\n            <Spin spinning={this.state.isLoading} size=\"large\">\r\n              {\r\n                this.state.q ? (\r\n\r\n                  <div className=\"mt-3\">\r\n                    {\r\n                      this.state.searchResult.map(\r\n                        (result, index) =>\r\n                          < ListGroup key={index}>\r\n                            <ListGroupItem>\r\n                              <ListGroupItemHeading ><Link to={\"/topic/\" + result.topicId} className=\"question-header\">{result.topicName}</Link><Badge style={{ marginLeft: '2%' }} pill> ตอบแล้ว {result.answerCount}</Badge></ListGroupItemHeading>\r\n                              <Label style={{ color: '#6C757D' }}> <FontAwesomeIcon icon=\"question\" size=\"sm\" />{\"\" + result.questionType}</Label>\r\n                              <ListGroupItemText>\r\n                                <Link to={\"/topic/\" + result.topicId} className=\"question-body\">\r\n                                  {result.topicText}\r\n                                </Link>\r\n                              </ListGroupItemText>\r\n                            </ListGroupItem>\r\n                          </ListGroup >\r\n                      )\r\n                    }\r\n                  </div>\r\n                ) : <QuestionTabs />\r\n              }\r\n            </Spin>\r\n          </CardBody>\r\n        </Card>\r\n      </div >\r\n    );\r\n  }\r\n}\r\nexport default Home;","import React from 'react';\nimport {\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\n\nconst PrivateRoute = ({ component: Component, authenticated, currentUser, ...rest }) => (\n  <Route\n    {...rest}\n    render={props =>\n      authenticated ? (\n        currentUser ? (\n          currentUser.authorities[0].authority === \"ADMIN\" ? (\n            <Component {...rest} {...props} />\n          ) : (\n              <Redirect\n                to={{\n                  pathname: '/',\n                  state: { from: props.location }\n                }}\n              />\n            )\n        ) : null\n      ) : (\n          <Redirect\n            to={{\n              pathname: '/',\n              state: { from: props.location }\n            }}\n          />\n        )\n    }\n  />\n);\n\nexport default PrivateRoute","import React, { Component } from 'react';\r\nimport { CardBody, Card } from 'reactstrap';\r\nimport { Form, Input, Button, Notification, Spin } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport { createComment } from '../util/APIUtils';\r\n\r\nconst FormItem = Form.Item;\r\nconst { TextArea } = Input;\r\n\r\n\r\nclass Answer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            \"answerText\": {\r\n                value: ''\r\n            },\r\n            isSubmit: false,\r\n            isLoading: false,\r\n        }\r\n\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleInputChange(event, validationFun) {\r\n        const target = event.target;\r\n        const inputName = target.name;\r\n        const inputValue = target.value;\r\n        // console.log(inputName)\r\n        this.setState({\r\n            [inputName]: {\r\n                value: inputValue,\r\n                ...validationFun(inputValue)\r\n            }\r\n        });\r\n\r\n        // console.log(this.state)\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        this.setState({\r\n            isSubmit: true,\r\n            isLoading: true,\r\n        },\r\n            this.callCreateAnswer()\r\n        )\r\n    }\r\n\r\n    callCreateAnswer = () => {\r\n        const commentData = {\r\n            \"commentText\": this.state.answerText.value\r\n        };\r\n\r\n        const smoothScroll = (h) => {\r\n            let i = h || 0;\r\n            let x = (document.body.scrollHeight || document.documentElement.scrollHeight) + 20;\r\n            if (i < x) {\r\n                setTimeout(() => {\r\n                    window.scrollTo(0, i);\r\n                    smoothScroll(i + 60);\r\n                }, 15);\r\n            }\r\n        }\r\n\r\n        createComment(commentData, this.props.match.params.id)\r\n            .then(response => {\r\n                this.props.history.push(\"/topic/\" + this.props.match.params.id);\r\n                // window.scrollTo(0, document.body.scrollHeight || document.documentElement.scrollHeight)\r\n\r\n                Notification.success({\r\n                    message: 'Health QA',\r\n                    description: \"ตอบคำถามสำเร็จแล้ว\",\r\n                });\r\n            })\r\n            .then(response => {\r\n                this.setState({\r\n                    \"answerText\": {\r\n                        value: ''\r\n                    },\r\n                    isSubmit: false,\r\n                    isLoading: false,\r\n                },\r\n                    smoothScroll((window.pageYOffset || document.documentElement.scrollTop) - (document.documentElement.clientTop || 0))\r\n                )\r\n            }).catch(error => {\r\n                if (error.status === 401) {\r\n                    this.props.handleLogout('/login', 'error', 'You have been logged out. Please login create Question.');\r\n                } else {\r\n                    Notification.error({\r\n                        message: 'Health QA',\r\n                        description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n\r\n\r\n    isFormInvalid() {\r\n        return !(this.state.answerText.validateStatus === 'success' && this.state.isSubmit === false);\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let ansForm;\r\n        if (this.props.currentUser) {\r\n            ansForm = [\r\n                <Form onSubmit={this.handleSubmit} key=\"2\">\r\n                    <FormItem\r\n                        label=\"รายละเอียดคำตอบ\"\r\n                        validateStatus={this.state.answerText.validateStatus}\r\n                        help={this.state.answerText.errorMsg}>\r\n                        <TextArea\r\n                            rows={4}\r\n                            size=\"large\"\r\n                            name=\"answerText\"\r\n                            autoComplete=\"off\"\r\n                            value={this.state.answerText.value}\r\n                            onChange={(event) => this.handleInputChange(event, this.validateAnswerText)} />\r\n                    </FormItem>\r\n                    <div className=\"float-right\">\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            size=\"large\"\r\n                            className=\"signup-form-button\"\r\n                            disabled={this.isFormInvalid()}>ตอบ</Button>\r\n                    </div>\r\n                </Form>\r\n            ]\r\n        } else {\r\n            ansForm = [\r\n                <div key=\"1\">\r\n                    <div style={{ textAlign: 'center' }}>\r\n                        <h4>คุณยังไม่ได้เข้าสู่ระบบ, กรุณาเข้าสู่ระบบเพื่อตอบคำถาม</h4>\r\n                    </div>\r\n                    <div style={{ textAlign: 'center' }}>\r\n                        <Link to=\"/login/\">เข้าสู่ระบบ</Link> หรือคุณยังไม่ได้เป็นสมาชิกใช่ไหม <Link to=\"/signup\">สมัครสมาชิก</Link> เลย!\r\n                    </div>\r\n                </div>\r\n            ]\r\n        }\r\n        return (\r\n            <div style={{ width: '100%' }}>\r\n                <Spin spinning={this.state.isLoading} size=\"large\">\r\n                    <Card className=\"mt-4 answer\">\r\n                        <CardBody>\r\n                            {ansForm}\r\n                        </CardBody>\r\n                    </Card>\r\n                </Spin>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    validateAnswerText = (answerText) => {\r\n        if (answerText.length < 10) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `คำตอบสั้นเกินไปนะ.`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null,\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nexport default Answer;","export function beautyDate(dateTime) {\r\n    const strMonth = [\"มกราคม\", \"กุมภาพันธ์\", \"มีนาคม\", \"เมษายน\", \"พฤษภาคม\",\r\n        \"มิถุนายน\", \"กรกฎาคม\", \"สิงหาคม\", \"กันยายน\", \"ตุลาคม\", \"พฤศจิกายน\", \"ธันวาคม\"];\r\n\r\n    if (dateTime) {\r\n        const str = dateTime.split(\"T\");\r\n        const date = str[0];\r\n        const time = str[1].split(\".\")[0];\r\n\r\n        const tempDate = date.split(\"-\");\r\n        const year = tempDate[0];\r\n        const month = strMonth[tempDate[1] - 1];\r\n        const day = tempDate[2];\r\n        return  day + \" \" + month + \" \" + year + \" เวลา \" + time;\r\n    }\r\n\r\n}","import React from 'react';\r\n\r\nimport {\r\n  Card, CardTitle, CardText, Col, Row, Label, UncontrolledTooltip, CardBody\r\n} from 'reactstrap';\r\n// import { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport Skeleton from 'react-loading-skeleton';\r\n// import AnswerCard from './AnswerCard';\r\nimport Answer from './Answer';\r\nimport './style.css';\r\nimport { beautyDate } from './DateUltils';\r\nimport NotFound from '../common/NotFound';\r\nimport ServerError from '../common/ServerError';\r\nimport { getTopic, reportTopic, reportComment } from '../util/APIUtils';\r\nimport { Spin, Modal, notification } from 'antd';\r\n\r\n// const confirm = Modal.confirm;\r\n\r\n\r\nexport default class Topic extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      topic: {\r\n        topicId: '',\r\n        topicName: '',\r\n        topicText: '',\r\n        height: '',\r\n        wieght: '',\r\n        ageY: '',\r\n        ageM: '',\r\n        ageD: '',\r\n        gender: '',\r\n        disease: '',\r\n        questionPurpose: '',\r\n        questionType: '',\r\n        username: '',\r\n        answerCount: '',\r\n        createDate: '',\r\n        comments: []\r\n      },\r\n      isLoading: false,\r\n      error: null,\r\n      ModalReportText: 'คลิกที่ปุ่ม OK เพื่อแจ้งให้เจ้าหน้าที่รับทราบ',\r\n      ModalReportVisible: false,\r\n      isReportTopic: null,\r\n      confirmLoading: false,\r\n      reportCommentId: null,\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps() {\r\n    this.handleLoadData()\r\n  }\r\n\r\n  componentDidMount() {\r\n    const smoothScroll = (h) => {\r\n      let i = h || 0;\r\n      if (i > 0) {\r\n        setTimeout(() => {\r\n          window.scrollTo(0, i);\r\n          smoothScroll(i - 50);\r\n        }, 10);\r\n      }\r\n    }\r\n\r\n    smoothScroll((window.pageYOffset || document.documentElement.scrollTop) - (document.documentElement.clientTop || 0));\r\n\r\n    // document.body.scrollTop = 0; // For Safari\r\n    // document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera\r\n    this.handleLoadData()\r\n  }\r\n\r\n  handleLoadData = () => {\r\n    this.setState({\r\n      isLoading: true\r\n    });\r\n\r\n    getTopic(this.props.match.params.id)\r\n      .then(response => {\r\n        this.setState({\r\n          topic: response,\r\n          isLoading: false\r\n        });\r\n      }).catch(error => {\r\n        if (error.status === 404) {\r\n          this.setState({\r\n            notFound: true,\r\n            isLoading: false\r\n          });\r\n        } else {\r\n          this.setState({\r\n            serverError: true,\r\n            isLoading: false\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  confirmReportComment = (e) => {\r\n    // console.log(e)\r\n    this.setState({\r\n      ModalReportVisible: true,\r\n      isReportTopic: false,\r\n      reportCommentId: e,\r\n    });\r\n  }\r\n\r\n  confirmReportTopic = (e) => {\r\n    this.setState({\r\n      ModalReportVisible: true,\r\n      isReportTopic: true,\r\n    });\r\n  }\r\n\r\n  handleReportTopicOK = () => {\r\n    this.setState({\r\n      ModalReportText: 'กำลังดำเนินการ, กรุณารอสักครู่...',\r\n      confirmLoading: true,\r\n    });\r\n\r\n    reportTopic(this.props.match.params.id)\r\n      .then(response => {\r\n        setTimeout(() => {\r\n\r\n          this.setState({\r\n            ModalReportVisible: false,\r\n            confirmLoading: false,\r\n            ModalReportText: 'คลิกที่ปุ่ม OK เพื่อแจ้งให้เจ้าหน้าที่รับทราบ',\r\n          },\r\n            notification.success({\r\n              message: 'Health QA',\r\n              description: \"แจ้งข้อความไม่เหมาะสมเรียบร้อย, เจ้าหน้าที่อาจจะใช้เวลา 1-2 วัน ในการตรวจสอบ\",\r\n            })\r\n          );\r\n        }, 1000);\r\n      })\r\n      .catch(error => {\r\n        if (error.status === 401) {\r\n          this.props.handleLogout('/login', 'error', 'You have been logged out. Please login create Question.');\r\n        } else {\r\n          Notification.error({\r\n            message: 'Health QA',\r\n            description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  handleReportCommentOK = () => {\r\n    this.setState({\r\n      ModalReportText: 'กำลังดำเนินการ, กรุณารอสักครู่...',\r\n      confirmLoading: true,\r\n    });\r\n\r\n    reportComment()\r\n      .then(response => {\r\n        setTimeout(() => {\r\n\r\n          this.setState({\r\n            ModalReportVisible: false,\r\n            confirmLoading: false,\r\n            ModalReportText: 'คลิกที่ปุ่ม OK เพื่อแจ้งให้เจ้าหน้าที่รับทราบ',\r\n          },\r\n            notification.success({\r\n              message: 'Health QA',\r\n              description: \"แจ้งข้อความไม่เหมาะสมเรียบร้อย, เจ้าหน้าที่อาจจะใช้เวลา 1-2 วัน ในการตรวจสอบ\",\r\n            })\r\n          );\r\n        }, 1000);\r\n      })\r\n      .catch(error => {\r\n        if (error.status === 401) {\r\n          this.props.handleLogout('/login', 'error', 'You have been logged out. Please login create Question.');\r\n        } else {\r\n          Notification.error({\r\n            message: 'Health QA',\r\n            description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  handleReportCancel = () => {\r\n    // console.log('Clicked cancel button');\r\n    this.setState({\r\n      ModalReportVisible: false,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { ModalReportVisible, confirmLoading, ModalReportText, isLoading } = this.state;\r\n\r\n    if (this.state.notFound) {\r\n      return <NotFound />;\r\n    }\r\n\r\n    if (this.state.serverError) {\r\n      return <ServerError />;\r\n    }\r\n\r\n    const { topicName, topicText, height, weight, ageY, ageM, ageD, gender,\r\n      disease, questionPurpose, questionType, name, answerCount, createDate } = this.state.topic;\r\n    return (\r\n      <div className=\"container\" id=\"topicContainer\">\r\n        <Modal title=\"คุณต้องการแจ้งข้อความไม่เหมาะสมใช่หรือไม่ ?\"\r\n          visible={ModalReportVisible}\r\n          centered\r\n          onOk={this.state.isReportTopic ? this.handleReportTopicOK : this.handleReportCommentOK}\r\n          confirmLoading={confirmLoading}\r\n          onCancel={this.handleReportCancel}\r\n        >\r\n          <p>{ModalReportText}</p>\r\n        </Modal>\r\n        <Spin spinning={this.state.isLoading} size=\"large\" delay={200}>\r\n          <Row>\r\n            <Card body id=\"topicCard\">\r\n              <Row>\r\n                <Col md={10} xs={10} sm={10}>\r\n                  <CardTitle style={{ fontSize: '1.6em' }}>{isLoading ? <Skeleton width=\"40%\" /> : topicName}</CardTitle>\r\n                  {isLoading ? <Skeleton width=\"30%\" /> : (\r\n                    <Label className=\"ml-2\"> <FontAwesomeIcon icon=\"question\" />{\" \" + questionType}</Label>\r\n                  )}\r\n\r\n                </Col>\r\n                <Col md={2} xs={2} sm={2}>\r\n                  <div href=\"/\" className=\"float-right\" onClick={this.confirmReportTopic}> <FontAwesomeIcon icon=\"trash-alt\" id=\"trash\" /></div>\r\n                  <UncontrolledTooltip placement=\"right\" target=\"trash\">แจ้งลบ</UncontrolledTooltip>\r\n\r\n                </Col>\r\n              </Row>\r\n\r\n              <hr />\r\n\r\n              <Row className=\"mt-1 ml-1 mb-2 mr-2 topic-text-body\">\r\n                <div className=\"topic-text\">\r\n                  {isLoading ? <Skeleton count={3} /> : topicText}\r\n                </div>\r\n              </Row>\r\n\r\n              <div className=\"mt-1 ml-1 mb-4 mr-1\">\r\n                <Card>\r\n                  <CardBody>\r\n                    <Row className=\"rowMargin\">\r\n                      <Col lg={2} md={3} sm={12} xs={12}>\r\n                        <div className=\"topic-text-header\">วัตถุประสงค์</div>\r\n                      </Col>\r\n                      <Col lg={10} md={9} sm={12} xs={12}>\r\n                        <div className=\"topic-text-body\">{isLoading ? <Skeleton width=\"40%\" /> : questionPurpose}</div>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row className=\"rowMargin\">\r\n                      <Col lg={2} md={3} sm={12} xs={12}>\r\n                        <div className=\"topic-text-header\">เพศ</div>\r\n                      </Col>\r\n                      <Col lg={10} md={9} sm={12} xs={12}>\r\n                        <div className=\"topic-text-body\">{isLoading ? <Skeleton width=\"40%\" /> : gender}</div>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row className=\"rowMargin\">\r\n                      <Col lg={2} md={3} sm={12} xs={12}>\r\n                        <div className=\"topic-text-header\">น้ำหนัก</div>\r\n                      </Col>\r\n                      <Col lg={10} md={9} sm={12} xs={12}>\r\n                        <div className=\"topic-text-body\">{isLoading ? <Skeleton width=\"40%\" /> : weight}</div>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row className=\"rowMargin\">\r\n                      <Col lg={2} md={3} sm={12} xs={12}>\r\n                        <div className=\"topic-text-header\">ส่วนสูง</div>\r\n                      </Col>\r\n                      <Col lg={10} md={9} sm={12} xs={12}>\r\n                        <div className=\"topic-text-body\">{isLoading ? <Skeleton width=\"40%\" /> : height}</div>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row className=\"rowMargin\">\r\n                      <Col lg={2} md={3} sm={12} xs={12}>\r\n                        <div className=\"topic-text-header\">อายุ</div>\r\n                      </Col>\r\n                      <Col lg={10} md={9} sm={12} xs={12}>\r\n                        <div className=\"topic-text-body\">{isLoading ? <Skeleton width=\"40%\" /> : (ageY > 0 ? ageY + \" ปี \" : '') + (ageM > 0 ? ageM + \" เดือน \" : '' + (ageD > 0 ? ageD + \" วัน \" : '') + \" (นับจากวันที่ถาม)\")}</div>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row className=\"rowMargin\">\r\n                      <Col lg={2} md={3} sm={12} xs={12}>\r\n                        <div className=\"topic-text-header\">โรคประจำตัว</div>\r\n                      </Col>\r\n                      <Col lg={10} md={9} sm={12} xs={12}>\r\n                        <div className=\"topic-text-body\">{isLoading ? <Skeleton width=\"40%\" /> : disease}</div>\r\n                      </Col>\r\n                    </Row>\r\n                  </CardBody>\r\n                </Card>\r\n              </div>\r\n\r\n              <hr />\r\n\r\n              <div className=\"child\">\r\n                <div className=\"avatar\">\r\n                  <div className=\"avatar__icon__user\"></div>\r\n                  <div className=\"avatar__name\">\r\n                    {/* <p className=\"avatar__first\">ถามโดย</p> */}\r\n                    <p className=\"avatar__first\">{name}</p>\r\n                    <p className=\"avatar__second\">{beautyDate(createDate)}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n            </Card>\r\n          </Row>\r\n\r\n          <div className=\"background-answer\"><span><FontAwesomeIcon icon=\"comments\" size=\"lg\" /> ตอบคำถาม</span></div>\r\n          <Answer isAuthenticated={this.props.isAuthenticated} currentUser={this.props.currentUser} {...this.props} />\r\n\r\n          <div className=\"background\"><span><FontAwesomeIcon icon=\"comments\" size=\"lg\" />  {answerCount} คำตอบ</span></div>\r\n          <div>\r\n            {\r\n              this.state.topic.comments ? (\r\n                this.state.topic.comments.map(\r\n                  (comment, index) =>\r\n                    <Row key={index}>\r\n                      <Card body className={comment.userType === \"USER\" ? \"ask__commentaries ask__commentaries--user ask__commentaries--type\" : \"ask__commentaries ask__commentaries--doctor ask__commentaries--type\"}>\r\n\r\n                        <div id=\"card-top-bar\">\r\n                          <div className=\"child\">\r\n                            <Row>\r\n                              <Col md={10} xs={10} sm={10}>\r\n                                <span className=\"ask__date\">{beautyDate(comment.createDate)}</span>\r\n                              </Col>\r\n                              <Col md={2} xs={2} sm={2}>\r\n                                <div className=\"float-right\" key={comment.commentId} onClick={(e) => this.confirmReportComment(comment.commentId, \"comment\")}> <FontAwesomeIcon icon=\"trash-alt\" id=\"trash\" /></div>\r\n                                <UncontrolledTooltip placement=\"right\" target=\"trash\">แจ้งลบ</UncontrolledTooltip>\r\n                              </Col>\r\n                            </Row>\r\n\r\n                            <div className=\"avatar\">\r\n                              <div className={comment.userType === \"USER\" ? \"avatar__icon__user\" : \"avatar__icon__doctor\"}></div>\r\n                              <div className=\"avatar__name\">\r\n                                <p className=\"avatar__first\">ตอบโดย</p>\r\n                                <p className=\"avatar__second\">{comment.name}</p>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <hr />\r\n                        <Row className=\"mt-4 ml-2 mb-4\">\r\n                          <CardText className=\"answer-text\">{comment.commentText}</CardText>\r\n                        </Row>\r\n\r\n                      </Card>\r\n                    </Row>\r\n                )\r\n              ) : null\r\n            }\r\n          </div>\r\n        </Spin>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\n\r\nimport {\r\n  Card, CardHeader, CardBody\r\n} from 'reactstrap';\r\nimport { sendContactUs } from '../util/APIUtils';\r\nimport { Form, Input, Button, Notification, Spin } from 'antd';\r\n\r\nconst FormItem = Form.Item;\r\nconst { TextArea } = Input;\r\n\r\nexport default class ContactUs extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      subject: {\r\n        value: ''\r\n      },\r\n      email: {\r\n        value: ''\r\n      },\r\n      content: {\r\n        value: ''\r\n      },\r\n      isSubmit: false,\r\n      isLoading: false,\r\n    }\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleInputChange(event, validationFun) {\r\n    const target = event.target;\r\n    const inputName = target.name;\r\n    const inputValue = target.value;\r\n    // console.log(inputName)\r\n    this.setState({\r\n      [inputName]: {\r\n        value: inputValue,\r\n        ...validationFun(inputValue)\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    this.setState({\r\n      isSubmit: true,\r\n      isLoading: true,\r\n    },\r\n      this.callSendContactus()\r\n    )\r\n  }\r\n\r\n  callSendContactus = () => {\r\n    const contactUsData = {\r\n      \"subject\": this.state.subject.value,\r\n      \"email\": this.state.email.value,\r\n      \"content\": this.state.content.value,\r\n    };\r\n\r\n    sendContactUs(contactUsData)\r\n      .then(response => {\r\n        this.props.history.push(\"/\");\r\n        // window.scrollTo(0, document.body.scrollHeight || document.documentElement.scrollHeight)\r\n        Notification.success({\r\n          message: 'Health QA',\r\n          description: \"ส่งข้อความสำเร็จแล้ว\",\r\n        });\r\n      })\r\n      .then(response => {\r\n        this.setState({\r\n          isSubmit: false,\r\n          isLoading: false,\r\n        })\r\n      }).catch(error => {\r\n        this.setState({\r\n          isSubmit: false,\r\n          isLoading: false,\r\n        })\r\n        if (error.status === 401) {\r\n          this.props.handleLogout('/login', 'error', 'You have been logged out. Please login create Question.');\r\n        } else {\r\n          Notification.error({\r\n            message: 'Health QA',\r\n            description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  isFormInvalid() {\r\n    return !(this.state.subject.validateStatus === 'success' && this.state.isSubmit === false);\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      // Show Div Full Page => container-fluid\r\n      <div className=\"container\" id=\"card-margin-top-bottom\">\r\n        <Spin spinning={this.state.isLoading} size=\"large\">\r\n          <Card outline color=\"info\">\r\n            <CardHeader style={{ backgroundColor: '#17A2B8', color: '#FFF' }} tag=\"h3\">ติดต่อสอบถาม</CardHeader>\r\n            <CardBody>\r\n              <Form onSubmit={this.handleSubmit}>\r\n                <FormItem\r\n                  label=\"เรื่อง\"\r\n                  validateStatus={this.state.subject.validateStatus}\r\n                  help={this.state.subject.errorMsg}>\r\n                  <Input\r\n                    size=\"large\"\r\n                    name=\"subject\"\r\n                    placeholder=\"ระบุเรื่อง\"\r\n                    autoComplete=\"off\"\r\n                    value={this.state.subject.value}\r\n                    onChange={(event) => this.handleInputChange(event, this.validateSubject)} />\r\n                </FormItem>\r\n                <FormItem\r\n                  label=\"อีเมล\"\r\n                  validateStatus={this.state.email.validateStatus}\r\n                  help={this.state.email.errorMsg}>\r\n                  <Input\r\n                    size=\"large\"\r\n                    name=\"email\"\r\n                    placeholder=\"ระบุอีเมล\"\r\n                    autoComplete=\"off\"\r\n                    value={this.state.email.value}\r\n                    onChange={(event) => this.handleInputChange(event, this.validateEmail)} />\r\n                </FormItem>\r\n                <FormItem\r\n                  label=\"รายละเอียด\"\r\n                  validateStatus={this.state.content.validateStatus}\r\n                  help={this.state.content.errorMsg}>\r\n                  <TextArea\r\n                    rows={4}\r\n                    size=\"large\"\r\n                    name=\"content\"\r\n                    autoComplete=\"off\"\r\n                    value={this.state.content.value}\r\n                    onChange={(event) => this.handleInputChange(event, this.validateContent)} />\r\n                </FormItem>\r\n                <div className=\"float-right\">\r\n                  <Button\r\n                    type=\"primary\"\r\n                    htmlType=\"submit\"\r\n                    size=\"large\"\r\n                    className=\"signup-form-button\"\r\n                    disabled={this.isFormInvalid()}>ส่งข้อความ</Button>\r\n                </div>\r\n              </Form>\r\n            </CardBody>\r\n          </Card>\r\n        </Spin>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  validateSubject = (subject) => {\r\n    if (subject.length === 0) {\r\n      return {\r\n        validateStatus: 'error',\r\n        errorMsg: `กรุณาระบุเรื่อง.`\r\n      }\r\n    } else {\r\n      return {\r\n        validateStatus: 'success',\r\n        errorMsg: null,\r\n      };\r\n    }\r\n  }\r\n\r\n  validateContent = (subject) => {\r\n    if (subject.length === 0) {\r\n      return {\r\n        validateStatus: 'error',\r\n        errorMsg: `กรุณาระบุรายละเอียด.`\r\n      }\r\n    } else {\r\n      return {\r\n        validateStatus: 'success',\r\n        errorMsg: null,\r\n      };\r\n    }\r\n  }\r\n\r\n  validateEmail = (email) => {\r\n    if (!email) {\r\n      return {\r\n        validateStatus: 'error',\r\n        errorMsg: 'กรุณาระบุอีเมล'\r\n      }\r\n    }\r\n\r\n    const EMAIL_REGEX = RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');\r\n    if (!EMAIL_REGEX.test(email)) {\r\n      return {\r\n        validateStatus: 'error',\r\n        errorMsg: 'อีเมลไม่ถูดต้อง'\r\n      }\r\n    }\r\n\r\n    return {\r\n      validateStatus: null,\r\n      errorMsg: null\r\n    }\r\n  }\r\n}","import React from 'react';\r\n\r\nimport {\r\n    Card, CardHeader, CardBody, Form, FormGroup, Label, Input, Button\r\n} from 'reactstrap';\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default class EditProfile extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            firstName: '',\r\n            lastName: '',\r\n            username: '',\r\n            email: '',\r\n            validate: {\r\n                emailState: '',\r\n                textState: ''\r\n            }\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange = async (event) => {\r\n        const { target } = event;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const { name } = target;\r\n        await this.setState({\r\n            [name]: value,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { firstName, lastName, username, email } = this.state;\r\n\r\n        return (\r\n            // Show Div Full Page => container-fluid\r\n            <div className=\"container\" id=\"card-margin-top-bottom\">\r\n                <Card outline color=\"info\">\r\n                    <CardHeader style={{ backgroundColor: '#17A2B8', color: '#FFF' }} tag=\"h3\">แก้ไขข้อมูล</CardHeader>\r\n                    <CardBody>\r\n                        <Form onSubmit={(e) => this.submitSignUpForm(e)}>\r\n                            <FormGroup>\r\n                                <Label for=\"firstName\" className=\"float-left\">ชื่อ</Label>\r\n                                <Input\r\n                                    value={firstName}\r\n                                    type=\"text\"\r\n                                    name=\"firstName\"\r\n                                    id=\"firstName\"\r\n                                    placeholder=\"First Name\"\r\n                                    required\r\n                                    onChange={(e) => {\r\n                                        this.handleChange(e)\r\n                                    }} />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label for=\"lastName\" className=\"float-left\">นามสกุล</Label>\r\n                                <Input\r\n                                    value={lastName}\r\n                                    type=\"text\"\r\n                                    name=\"lastName\"\r\n                                    id=\"lastName\"\r\n                                    placeholder=\"Last Name\"\r\n                                    required\r\n                                    onChange={(e) => {\r\n                                        this.handleChange(e)\r\n                                    }} />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label for=\"username\" className=\"float-left\">ชื่อผู้ใช้งาน</Label>\r\n                                <Input\r\n                                    value={username}\r\n                                    type=\"text\"\r\n                                    name=\"username\"\r\n                                    id=\"username\"\r\n                                    placeholder=\"Username\"\r\n                                    required\r\n                                    onChange={(e) => {\r\n                                        this.handleChange(e)\r\n                                    }} />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label for=\"regisEmail\" className=\"float-left\">อีเมล</Label>\r\n                                <Input\r\n                                    value={email}\r\n                                    type=\"email\"\r\n                                    name=\"email\"\r\n                                    id=\"regisEmail\"\r\n                                    placeholder=\"E-Mail\"\r\n                                    required\r\n                                    onChange={(e) => {\r\n                                        this.handleChange(e)\r\n                                    }} />\r\n                            </FormGroup>\r\n                            <Button outline color=\"info\">บันทึก</Button>{' '}\r\n                        </Form>\r\n                    </CardBody>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport { Tabs, Button, Spin, Notification, Modal } from 'antd';\nimport { Table } from 'reactstrap';\nimport './admin.css';\nimport NotFound from '../common/NotFound';\nimport ServerError from '../common/ServerError';\nimport { getReports, deleteComment, deleteTopic } from '../util/APIUtils';\nimport { Card, CardBody } from 'reactstrap';\n\nconst TabPane = Tabs.TabPane;\n\nclass RequestRemove extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            topic: [],\n            comment: [],\n            isLoading: false,\n            error: null,\n            ModalText: 'ท่านต้องการลบคำถามนี้ใช่หรือไม่ ?',\n            ModalVisible: false,\n            confirmLoading: false,\n            topicId: null,\n            commentId: null,\n            isTopic: null,\n        }\n    }\n    componentDidMount() {\n        this.handleLoadData();\n    }\n\n    handleLoadData = () => {\n        this.setState({\n            isLoading: true\n        });\n\n        getReports()\n            .then(response => {\n                // console.log(response.topic)\n                this.setState({\n                    topic: response.topic,\n                    comment: response.comment,\n                    isLoading: false\n                });\n            }).catch(error => {\n                if (error.status === 404) {\n                    this.setState({\n                        notFound: true,\n                        isLoading: false\n                    });\n                } else {\n                    this.setState({\n                        serverError: true,\n                        isLoading: false\n                    });\n                }\n            });\n    }\n\n    handleTopicViewButton = (e) => {\n        this.props.history.push(\"/topic/\" + e);\n    }\n\n    handleTopicDeleteButton = (e) => {\n        // console.log(e)\n        this.setState({\n            ModalVisible: true,\n            topicId: e,\n            isTopic: true,\n        });\n        // this.props.history.push(\"/topic/\" + e);\n    }\n\n    handleCommentDeleteButton = (e) => {\n        // console.log(e)\n        this.setState({\n            ModalVisible: true,\n            commentId: e,\n            topicId: null,\n            isTopic: false,\n        });\n        // this.props.history.push(\"/topic/\" + e);\n    }\n\n    handleModalCancel = () => {\n        // console.log('Clicked cancel button');\n        this.setState({\n            ModalVisible: false,\n        });\n    }\n\n    handleModalTopicOK = () => {\n        this.setState({\n            ModalText: 'กำลังดำเนินการ, กรุณารอสักครู่...',\n            confirmLoading: true,\n        });\n\n        deleteTopic(this.state.topicId)\n            .then(response => {\n                setTimeout(() => {\n                    this.setState({\n                        ModalVisible: false,\n                        confirmLoading: false,\n                        ModalText: 'ท่านต้องการลบคำถามนี้ใช่หรือไม่ ?',\n                    },\n                        this.handleLoadData(),\n                        Notification.success({\n                            message: 'Health QA',\n                            description: \"ลบคำถามเรียบร้อยแล้ว\",\n                        })\n                    );\n                }, 1000);\n            })\n            .catch(error => {\n                if (error.status === 401) {\n                    this.props.handleLogout('/login', 'error', 'You have been logged out. Please login create Question.');\n                } else {\n                    Notification.error({\n                        message: 'Health QA',\n                        description: error.message || 'Sorry! Something went wrong. Please try again!'\n                    });\n                }\n            });\n    }\n\n    handleModalCommentOK = () => {\n        this.setState({\n            ModalText: 'กำลังดำเนินการ, กรุณารอสักครู่...',\n            confirmLoading: true,\n        });\n\n        deleteComment(this.state.commentId)\n            .then(response => {\n                setTimeout(() => {\n                    this.setState({\n                        ModalVisible: false,\n                        confirmLoading: false,\n                        ModalText: 'ท่านต้องการลบคำถามนี้ใช่หรือไม่ ?',\n                    },\n                        this.handleLoadData(),\n                        Notification.success({\n                            message: 'Health QA',\n                            description: \"ลบคำถามเรียบร้อยแล้ว\",\n                        })\n                    );\n                }, 1000);\n            })\n            .catch(error => {\n                if (error.status === 401) {\n                    this.props.handleLogout('/login', 'error', 'You have been logged out. Please login create Question.');\n                } else {\n                    Notification.error({\n                        message: 'Health QA',\n                        description: error.message || 'Sorry! Something went wrong. Please try again!'\n                    });\n                }\n            });\n    }\n\n    render() {\n        const { error } = this.state;\n        if (this.state.notFound) {\n            return <NotFound />;\n        }\n\n        if (this.state.serverError) {\n            return <ServerError />;\n        }\n\n        if (error) {\n            return (\n                <div style={{ textAlign: 'center' }}>\n                    <h1>We're sorry, but {error.message || \"Something went wrong. Please try again!\"}</h1>\n                    <p>If you are the application owner check the logs for more information.</p>\n                </div>\n            );\n        }\n\n\n        const tabBarStyle = {\n            textAlign: 'center'\n        };\n        return (\n            <Card outline color=\"danger\">\n                <Modal title=\"ยืนยันการทำรายการ\"\n                    visible={this.state.ModalVisible}\n                    centered\n                    onOk={this.state.isTopic ? this.handleModalTopicOK : this.handleModalCommentOK}\n                    confirmLoading={this.state.confirmLoading}\n                    onCancel={this.handleModalCancel}\n                >\n                    <p>{this.state.ModalText}</p>\n                </Modal>\n                <CardBody>\n                    <div className=\"profile\">\n                        <Spin spinning={this.state.isLoading} size=\"large\" delay={200}>\n                            <div className=\"user-poll-details\">\n                                <Tabs defaultActiveKey=\"1\"\n                                    animated={false}\n                                    tabBarStyle={tabBarStyle}\n                                    size=\"large\"\n                                    className=\"profile-tabs\">\n                                    <TabPane tab=\"รายการแจ้งลบคำถาม\" key=\"1\">\n                                        <Table striped>\n                                            <thead>\n                                                <tr>\n                                                    <th>ID</th>\n                                                    <th>คำถาม</th>\n                                                    <th>รายละเอียด</th>\n                                                    <th>Action</th>\n                                                </tr>\n                                            </thead>\n                                            <tbody>\n                                                {\n                                                    this.props.currentUser ? (\n                                                        this.state.topic.map(\n                                                            (topic, index) =>\n                                                                <tr key={index}>\n                                                                    <th scope=\"row\">{topic.id}</th>\n                                                                    <td>{topic.topicName.substring(0, 60)}{topic.topicName.length > 60 ? \"...\" : null}</td>\n                                                                    <td>{topic.topicText.substring(0, 60)}{topic.topicText.length > 60 ? \"...\" : null}</td>\n                                                                    <td style={{ width: '150px' }}>\n                                                                        <div>\n                                                                            <Button\n                                                                                type=\"primary\"\n                                                                                ghost\n                                                                                shape=\"circle\"\n                                                                                icon=\"select\"\n                                                                                onClick={(e) => this.handleTopicViewButton(topic.id)} />\n                                                                            <Button\n                                                                                type=\"danger\"\n                                                                                ghost\n                                                                                className=\"ml-2\"\n                                                                                shape=\"circle\"\n                                                                                icon=\"delete\"\n                                                                                onClick={(e) => this.handleTopicDeleteButton(topic.id)} />\n                                                                        </div>\n                                                                    </td>\n                                                                </tr>\n                                                        )\n                                                    ) : null\n                                                }\n                                            </tbody>\n                                        </Table>\n                                        {\n                                            !this.state.isLoading && this.state.topic.length === 0 ? (\n                                                <div className=\"no-polls-found\">\n                                                    <span>No Data Found.</span>\n                                                </div>\n                                            ) : null\n                                        }\n                                    </TabPane>\n                                    <TabPane tab=\"รายการแจ้งลบคำตอบ\" key=\"2\">\n                                        <Table striped>\n                                            <thead>\n                                                <tr>\n                                                    <th>Topic ID</th>\n                                                    <th>Comment ID</th>\n                                                    <th>รายละเอียดคำตอบ</th>\n                                                    <th>Action</th>\n                                                </tr>\n                                            </thead>\n                                            <tbody>\n                                                {\n                                                    this.props.currentUser ? (\n                                                        this.state.comment.map(\n                                                            (comment, index) =>\n                                                                <tr key={index}>\n                                                                    <th>{comment.topicId}</th>\n                                                                    <th scope=\"row\">{comment.id}</th>\n                                                                    <td>{comment.commentText.substring(0, 60)}{comment.commentText.length > 60 ? \"...\" : null}</td>\n                                                                    <td style={{ width: '150px' }}>\n                                                                        <div>\n                                                                            <Button\n                                                                                type=\"primary\"\n                                                                                ghost\n                                                                                shape=\"circle\"\n                                                                                icon=\"select\"\n                                                                                onClick={(e) => this.handleTopicViewButton(comment.topicId)} />\n                                                                            <Button\n                                                                                type=\"danger\"\n                                                                                ghost\n                                                                                className=\"ml-2\"\n                                                                                shape=\"circle\"\n                                                                                icon=\"delete\"\n                                                                                onClick={(e) => this.handleCommentDeleteButton(comment.id)} />\n                                                                        </div>\n                                                                    </td>\n                                                                </tr>\n                                                        )\n                                                    ) : null\n                                                }\n                                            </tbody>\n                                        </Table>\n                                        {\n                                            !this.state.isLoading && this.state.comment.length === 0 ? (\n                                                <div className=\"no-polls-found\">\n                                                    <span>No Data Found.</span>\n                                                </div>\n                                            ) : null\n                                        }\n                                    </TabPane>\n                                </Tabs>\n                            </div>\n                        </Spin>\n                    </div>\n                </CardBody>\n            </Card>\n        );\n    }\n}\n\nexport default RequestRemove;","import React, { Component } from 'react';\r\nimport { signupAdmin, checkUsernameAvailability, checkEmailAvailability } from '../../util/APIUtils';\r\nimport './Signup.css';\r\nimport {\r\n    NAME_MIN_LENGTH, NAME_MAX_LENGTH,\r\n    USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH,\r\n    EMAIL_MAX_LENGTH,\r\n    PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH\r\n} from '../../constants';\r\n\r\nimport { Form, Input, Button, notification, Row, Col } from 'antd';\r\nconst FormItem = Form.Item;\r\n\r\nclass SignupAdmin extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            firstname: {\r\n                value: ''\r\n            },\r\n            lastname: {\r\n                value: ''\r\n            },\r\n            username: {\r\n                value: ''\r\n            },\r\n            email: {\r\n                value: ''\r\n            },\r\n            password: {\r\n                value: ''\r\n            }\r\n        }\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.validateUsernameAvailability = this.validateUsernameAvailability.bind(this);\r\n        this.validateEmailAvailability = this.validateEmailAvailability.bind(this);\r\n        this.isFormInvalid = this.isFormInvalid.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.isAuthenticated) {\r\n            this.props.history.push(\"/\");\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.isAuthenticated) {\r\n            this.props.history.goBack();\r\n        }\r\n    }\r\n\r\n    handleInputChange(event, validationFun) {\r\n        const target = event.target;\r\n        const inputName = target.name;\r\n        const inputValue = target.value;\r\n\r\n        this.setState({\r\n            [inputName]: {\r\n                value: inputValue,\r\n                ...validationFun(inputValue)\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        const signupRequest = {\r\n            firstname: this.state.firstname.value,\r\n            lastname: this.state.lastname.value,\r\n            email: this.state.email.value,\r\n            username: this.state.username.value,\r\n            password: this.state.password.value\r\n        };\r\n        signupAdmin(signupRequest)\r\n            .then(response => {\r\n                this.props.onClick()\r\n                this.props.handleLoadData()\r\n                notification.success({\r\n                    message: 'Health QA',\r\n                    description: \"Thank you! You're successfully registered. Please Login to continue!\",\r\n                });\r\n                this.props.history.push(\"/login\");\r\n            }).catch(error => {\r\n                notification.error({\r\n                    message: 'Health QA',\r\n                    description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                });\r\n            });\r\n    }\r\n\r\n    isFormInvalid() {\r\n        return !(this.state.firstname.validateStatus === 'success' &&\r\n            this.state.lastname.validateStatus === 'success' &&\r\n            this.state.username.validateStatus === 'success' &&\r\n            this.state.email.validateStatus === 'success' &&\r\n            this.state.password.validateStatus === 'success'\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"signup-container\">\r\n                <h3 className=\"page-title\">ลงทะเบียนผู้ดูแลระบบ</h3>\r\n                <div className=\"signup-content\">\r\n                    <Form onSubmit={this.handleSubmit} className=\"signup-form\">\r\n                        <FormItem\r\n                            label=\"First Name\"\r\n                            validateStatus={this.state.firstname.validateStatus}\r\n                            help={this.state.firstname.errorMsg}>\r\n                            <Input\r\n                                size=\"large\"\r\n                                name=\"firstname\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"ชื่อ\"\r\n                                value={this.state.firstname.value}\r\n                                onChange={(event) => this.handleInputChange(event, this.validateName)} />\r\n                        </FormItem>\r\n                        <FormItem\r\n                            label=\"Last Name\"\r\n                            validateStatus={this.state.lastname.validateStatus}\r\n                            help={this.state.lastname.errorMsg}>\r\n                            <Input\r\n                                size=\"large\"\r\n                                name=\"lastname\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"นามสกุล\"\r\n                                value={this.state.lastname.value}\r\n                                onChange={(event) => this.handleInputChange(event, this.validateName)} />\r\n                        </FormItem>\r\n                        <FormItem label=\"Username\"\r\n                            hasFeedback\r\n                            validateStatus={this.state.username.validateStatus}\r\n                            help={this.state.username.errorMsg}>\r\n                            <Input\r\n                                size=\"large\"\r\n                                name=\"username\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"A unique username\"\r\n                                value={this.state.username.value}\r\n                                onBlur={this.validateUsernameAvailability}\r\n                                onChange={(event) => this.handleInputChange(event, this.validateUsername)} />\r\n                        </FormItem>\r\n                        <FormItem\r\n                            label=\"Email\"\r\n                            hasFeedback\r\n                            validateStatus={this.state.email.validateStatus}\r\n                            help={this.state.email.errorMsg}>\r\n                            <Input\r\n                                size=\"large\"\r\n                                name=\"email\"\r\n                                type=\"email\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Your email\"\r\n                                value={this.state.email.value}\r\n                                onBlur={this.validateEmailAvailability}\r\n                                onChange={(event) => this.handleInputChange(event, this.validateEmail)} />\r\n                        </FormItem>\r\n                        <FormItem\r\n                            label=\"Password\"\r\n                            validateStatus={this.state.password.validateStatus}\r\n                            help={this.state.password.errorMsg}>\r\n                            <Input\r\n                                size=\"large\"\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"A password between 8 to 26 characters\"\r\n                                value={this.state.password.value}\r\n                                onChange={(event) => this.handleInputChange(event, this.validatePassword)} />\r\n                        </FormItem>\r\n                        <Row>\r\n                            <Col span={24} style={{ textAlign: 'right' }}>\r\n                                <Button type=\"primary\" size=\"large\" ghost htmlType=\"submit\" disabled={this.isFormInvalid()}>ลงทะเบียน</Button>\r\n                                <Button type=\"danger\" size=\"large\" ghost style={{ marginLeft: 8 }} onClick={this.props.onClick}>ยกเลิก</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Validation Functions\r\n\r\n    validateName = (name) => {\r\n        if (name.length < NAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Name is too short (Minimum ${NAME_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (name.length > NAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Name is too long (Maximum ${NAME_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null,\r\n            };\r\n        }\r\n    }\r\n\r\n    validateEmail = (email) => {\r\n        if (!email) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: 'Email may not be empty'\r\n            }\r\n        }\r\n\r\n        const EMAIL_REGEX = RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');\r\n        if (!EMAIL_REGEX.test(email)) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: 'Email not valid'\r\n            }\r\n        }\r\n\r\n        if (email.length > EMAIL_MAX_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Email is too long (Maximum ${EMAIL_MAX_LENGTH} characters allowed)`\r\n            }\r\n        }\r\n\r\n        return {\r\n            validateStatus: null,\r\n            errorMsg: null\r\n        }\r\n    }\r\n\r\n    validateUsername = (username) => {\r\n        if (username.length < USERNAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Username is too short (Minimum ${USERNAME_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (username.length > USERNAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Username is too long (Maximum ${USERNAME_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: null,\r\n                errorMsg: null\r\n            }\r\n        }\r\n    }\r\n\r\n    validateUsernameAvailability() {\r\n        // First check for client side errors in username\r\n        const usernameValue = this.state.username.value;\r\n        const usernameValidation = this.validateUsername(usernameValue);\r\n\r\n        if (usernameValidation.validateStatus === 'error') {\r\n            this.setState({\r\n                username: {\r\n                    value: usernameValue,\r\n                    ...usernameValidation\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            username: {\r\n                value: usernameValue,\r\n                validateStatus: 'validating',\r\n                errorMsg: null\r\n            }\r\n        });\r\n\r\n        checkUsernameAvailability(usernameValue)\r\n            .then(response => {\r\n                if (response.available) {\r\n                    this.setState({\r\n                        username: {\r\n                            value: usernameValue,\r\n                            validateStatus: 'success',\r\n                            errorMsg: null\r\n                        }\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        username: {\r\n                            value: usernameValue,\r\n                            validateStatus: 'error',\r\n                            errorMsg: 'This username is already taken'\r\n                        }\r\n                    });\r\n                }\r\n            }).catch(error => {\r\n                // Marking validateStatus as success, Form will be recchecked at server\r\n                this.setState({\r\n                    username: {\r\n                        value: usernameValue,\r\n                        validateStatus: 'success',\r\n                        errorMsg: null\r\n                    }\r\n                });\r\n            });\r\n    }\r\n\r\n    validateEmailAvailability() {\r\n        // First check for client side errors in email\r\n        const emailValue = this.state.email.value;\r\n        const emailValidation = this.validateEmail(emailValue);\r\n\r\n        if (emailValidation.validateStatus === 'error') {\r\n            this.setState({\r\n                email: {\r\n                    value: emailValue,\r\n                    ...emailValidation\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            email: {\r\n                value: emailValue,\r\n                validateStatus: 'validating',\r\n                errorMsg: null\r\n            }\r\n        });\r\n\r\n        checkEmailAvailability(emailValue)\r\n            .then(response => {\r\n                if (response.available) {\r\n                    this.setState({\r\n                        email: {\r\n                            value: emailValue,\r\n                            validateStatus: 'success',\r\n                            errorMsg: null\r\n                        }\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        email: {\r\n                            value: emailValue,\r\n                            validateStatus: 'error',\r\n                            errorMsg: 'This Email is already registered'\r\n                        }\r\n                    });\r\n                }\r\n            }).catch(error => {\r\n                // Marking validateStatus as success, Form will be recchecked at server\r\n                this.setState({\r\n                    email: {\r\n                        value: emailValue,\r\n                        validateStatus: 'success',\r\n                        errorMsg: null\r\n                    }\r\n                });\r\n            });\r\n    }\r\n\r\n    validatePassword = (password) => {\r\n        if (password.length < PASSWORD_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Password is too short (Minimum ${PASSWORD_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (password.length > PASSWORD_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Password is too long (Maximum ${PASSWORD_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null,\r\n            };\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default SignupAdmin;","import React, { Component } from 'react';\r\nimport { signupDoctor, checkUsernameAvailability, checkEmailAvailability } from '../../util/APIUtils';\r\nimport './Signup.css';\r\nimport {\r\n    NAME_MIN_LENGTH, NAME_MAX_LENGTH,\r\n    USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH,\r\n    EMAIL_MAX_LENGTH,\r\n    PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH\r\n} from '../../constants';\r\n\r\nimport { Form, Input, Button, notification, Row, Col } from 'antd';\r\nconst FormItem = Form.Item;\r\n\r\nclass SignupDoctor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            firstname: {\r\n                value: ''\r\n            },\r\n            lastname: {\r\n                value: ''\r\n            },\r\n            username: {\r\n                value: ''\r\n            },\r\n            email: {\r\n                value: ''\r\n            },\r\n            password: {\r\n                value: ''\r\n            }\r\n        }\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.validateUsernameAvailability = this.validateUsernameAvailability.bind(this);\r\n        this.validateEmailAvailability = this.validateEmailAvailability.bind(this);\r\n        this.isFormInvalid = this.isFormInvalid.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.isAuthenticated) {\r\n            this.props.history.push(\"/\");\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.isAuthenticated) {\r\n            this.props.history.goBack();\r\n        }\r\n    }\r\n\r\n    handleInputChange(event, validationFun) {\r\n        const target = event.target;\r\n        const inputName = target.name;\r\n        const inputValue = target.value;\r\n\r\n        this.setState({\r\n            [inputName]: {\r\n                value: inputValue,\r\n                ...validationFun(inputValue)\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        const signupRequest = {\r\n            firstname: this.state.firstname.value,\r\n            lastname: this.state.lastname.value,\r\n            email: this.state.email.value,\r\n            username: this.state.username.value,\r\n            password: this.state.password.value\r\n        };\r\n        signupDoctor(signupRequest)\r\n            .then(response => {\r\n                this.props.onClick()\r\n                this.props.handleLoadData()\r\n                notification.success({\r\n                    message: 'Health QA',\r\n                    description: \"Thank you! You're successfully registered. Please Login to continue!\",\r\n                });\r\n            }).catch(error => {\r\n                notification.error({\r\n                    message: 'Health QA',\r\n                    description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                });\r\n            });\r\n    }\r\n\r\n    isFormInvalid() {\r\n        return !(this.state.firstname.validateStatus === 'success' &&\r\n            this.state.lastname.validateStatus === 'success' &&\r\n            this.state.username.validateStatus === 'success' &&\r\n            this.state.email.validateStatus === 'success' &&\r\n            this.state.password.validateStatus === 'success'\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"signup-container\">\r\n                <h3 className=\"page-title\">ลงทะเบียนแพทย์/เภสัชกร</h3>\r\n                <div className=\"signup-content\">\r\n                    <Form onSubmit={this.handleSubmit} className=\"signup-form\">\r\n                        <FormItem\r\n                            label=\"First Name\"\r\n                            validateStatus={this.state.firstname.validateStatus}\r\n                            help={this.state.firstname.errorMsg}>\r\n                            <Input\r\n                                size=\"large\"\r\n                                name=\"firstname\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"ชื่อ\"\r\n                                value={this.state.firstname.value}\r\n                                onChange={(event) => this.handleInputChange(event, this.validateName)} />\r\n                        </FormItem>\r\n                        <FormItem\r\n                            label=\"Last Name\"\r\n                            validateStatus={this.state.lastname.validateStatus}\r\n                            help={this.state.lastname.errorMsg}>\r\n                            <Input\r\n                                size=\"large\"\r\n                                name=\"lastname\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"นามสกุล\"\r\n                                value={this.state.lastname.value}\r\n                                onChange={(event) => this.handleInputChange(event, this.validateName)} />\r\n                        </FormItem>\r\n                        <FormItem label=\"Username\"\r\n                            hasFeedback\r\n                            validateStatus={this.state.username.validateStatus}\r\n                            help={this.state.username.errorMsg}>\r\n                            <Input\r\n                                size=\"large\"\r\n                                name=\"username\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"A unique username\"\r\n                                value={this.state.username.value}\r\n                                onBlur={this.validateUsernameAvailability}\r\n                                onChange={(event) => this.handleInputChange(event, this.validateUsername)} />\r\n                        </FormItem>\r\n                        <FormItem\r\n                            label=\"Email\"\r\n                            hasFeedback\r\n                            validateStatus={this.state.email.validateStatus}\r\n                            help={this.state.email.errorMsg}>\r\n                            <Input\r\n                                size=\"large\"\r\n                                name=\"email\"\r\n                                type=\"email\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Your email\"\r\n                                value={this.state.email.value}\r\n                                onBlur={this.validateEmailAvailability}\r\n                                onChange={(event) => this.handleInputChange(event, this.validateEmail)} />\r\n                        </FormItem>\r\n                        <FormItem\r\n                            label=\"Password\"\r\n                            validateStatus={this.state.password.validateStatus}\r\n                            help={this.state.password.errorMsg}>\r\n                            <Input\r\n                                size=\"large\"\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"A password between 8 to 26 characters\"\r\n                                value={this.state.password.value}\r\n                                onChange={(event) => this.handleInputChange(event, this.validatePassword)} />\r\n                        </FormItem>\r\n                        <Row>\r\n                            <Col span={24} style={{ textAlign: 'right' }}>\r\n                                <Button type=\"primary\" size=\"large\" ghost htmlType=\"submit\" disabled={this.isFormInvalid()}>ลงทะเบียน</Button>\r\n                                <Button type=\"danger\" size=\"large\" ghost style={{ marginLeft: 8 }} onClick={this.props.onClick}>ยกเลิก</Button>\r\n                            </Col>\r\n                        </Row>\r\n                        {/* <FormItem >\r\n                            <Button type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                size=\"large\"\r\n                                className=\"signup-form-button\"\r\n                                disabled={this.isFormInvalid()}>Sign up</Button>\r\n                            <Button type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                size=\"large\"\r\n                                className=\"signup-form-button\"\r\n                                disabled={this.isFormInvalid()}>Cancel\r\n                                </Button>\r\n                        </FormItem> */}\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Validation Functions\r\n\r\n    validateName = (name) => {\r\n        if (name.length < NAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Name is too short (Minimum ${NAME_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (name.length > NAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Name is too long (Maximum ${NAME_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null,\r\n            };\r\n        }\r\n    }\r\n\r\n    validateEmail = (email) => {\r\n        if (!email) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: 'Email may not be empty'\r\n            }\r\n        }\r\n\r\n        const EMAIL_REGEX = RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');\r\n        if (!EMAIL_REGEX.test(email)) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: 'Email not valid'\r\n            }\r\n        }\r\n\r\n        if (email.length > EMAIL_MAX_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Email is too long (Maximum ${EMAIL_MAX_LENGTH} characters allowed)`\r\n            }\r\n        }\r\n\r\n        return {\r\n            validateStatus: null,\r\n            errorMsg: null\r\n        }\r\n    }\r\n\r\n    validateUsername = (username) => {\r\n        if (username.length < USERNAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Username is too short (Minimum ${USERNAME_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (username.length > USERNAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Username is too long (Maximum ${USERNAME_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: null,\r\n                errorMsg: null\r\n            }\r\n        }\r\n    }\r\n\r\n    validateUsernameAvailability() {\r\n        // First check for client side errors in username\r\n        const usernameValue = this.state.username.value;\r\n        const usernameValidation = this.validateUsername(usernameValue);\r\n\r\n        if (usernameValidation.validateStatus === 'error') {\r\n            this.setState({\r\n                username: {\r\n                    value: usernameValue,\r\n                    ...usernameValidation\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            username: {\r\n                value: usernameValue,\r\n                validateStatus: 'validating',\r\n                errorMsg: null\r\n            }\r\n        });\r\n\r\n        checkUsernameAvailability(usernameValue)\r\n            .then(response => {\r\n                if (response.available) {\r\n                    this.setState({\r\n                        username: {\r\n                            value: usernameValue,\r\n                            validateStatus: 'success',\r\n                            errorMsg: null\r\n                        }\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        username: {\r\n                            value: usernameValue,\r\n                            validateStatus: 'error',\r\n                            errorMsg: 'This username is already taken'\r\n                        }\r\n                    });\r\n                }\r\n            }).catch(error => {\r\n                // Marking validateStatus as success, Form will be recchecked at server\r\n                this.setState({\r\n                    username: {\r\n                        value: usernameValue,\r\n                        validateStatus: 'success',\r\n                        errorMsg: null\r\n                    }\r\n                });\r\n            });\r\n    }\r\n\r\n    validateEmailAvailability() {\r\n        // First check for client side errors in email\r\n        const emailValue = this.state.email.value;\r\n        const emailValidation = this.validateEmail(emailValue);\r\n\r\n        if (emailValidation.validateStatus === 'error') {\r\n            this.setState({\r\n                email: {\r\n                    value: emailValue,\r\n                    ...emailValidation\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            email: {\r\n                value: emailValue,\r\n                validateStatus: 'validating',\r\n                errorMsg: null\r\n            }\r\n        });\r\n\r\n        checkEmailAvailability(emailValue)\r\n            .then(response => {\r\n                if (response.available) {\r\n                    this.setState({\r\n                        email: {\r\n                            value: emailValue,\r\n                            validateStatus: 'success',\r\n                            errorMsg: null\r\n                        }\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        email: {\r\n                            value: emailValue,\r\n                            validateStatus: 'error',\r\n                            errorMsg: 'This Email is already registered'\r\n                        }\r\n                    });\r\n                }\r\n            }).catch(error => {\r\n                // Marking validateStatus as success, Form will be recchecked at server\r\n                this.setState({\r\n                    email: {\r\n                        value: emailValue,\r\n                        validateStatus: 'success',\r\n                        errorMsg: null\r\n                    }\r\n                });\r\n            });\r\n    }\r\n\r\n    validatePassword = (password) => {\r\n        if (password.length < PASSWORD_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Password is too short (Minimum ${PASSWORD_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (password.length > PASSWORD_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Password is too long (Maximum ${PASSWORD_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null,\r\n            };\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default SignupDoctor;","import React, { Component } from 'react';\r\nimport { Tabs, Button, Spin, Modal, Notification } from 'antd';\r\nimport { Table } from 'reactstrap';\r\nimport './admin.css';\r\nimport NotFound from '../common/NotFound';\r\nimport ServerError from '../common/ServerError';\r\nimport { getUsers, deleteUser } from '../util/APIUtils';\r\nimport { Card, CardBody } from 'reactstrap';\r\nimport { Modal as ModelReactStrap, ModalBody } from 'reactstrap';\r\nimport SignupAdmin from './signup/SignupAdmin';\r\nimport SignupDoctor from './signup/SignupDoctor';\r\n\r\nconst TabPane = Tabs.TabPane;\r\n\r\nclass ManageUsers extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            admin: [],\r\n            doctor: [],\r\n            isLoading: false,\r\n            error: null,\r\n            ModalText: 'ท่านต้องการลบผู้ใช้นี้ใช่หรือไม่ ?',\r\n            ModalVisible: false,\r\n            confirmLoading: false,\r\n            username: null,\r\n            isDoctor: null,\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.handleLoadData();\r\n    }\r\n\r\n    handleLoadData = () => {\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n\r\n        getUsers()\r\n            .then(response => {\r\n                // console.log(response)\r\n                this.setState({\r\n                    admin: response.admin,\r\n                    doctor: response.doctor,\r\n                    isLoading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.status === 404) {\r\n                    this.setState({\r\n                        notFound: true,\r\n                        isLoading: false\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        serverError: true,\r\n                        isLoading: false\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    handleDeleteButton = (e) => {\r\n        // console.log(e)\r\n        this.setState({\r\n            ModalVisible: true,\r\n            username: e,\r\n        });\r\n        // this.props.history.push(\"/topic/\" + e);\r\n    }\r\n\r\n    handleModalCancel = () => {\r\n        // console.log('Clicked cancel button');\r\n        this.setState({\r\n            ModalVisible: false,\r\n        });\r\n    }\r\n\r\n    handleModalOK = () => {\r\n        this.setState({\r\n            ModalText: 'กำลังดำเนินการ, กรุณารอสักครู่...',\r\n            confirmLoading: true,\r\n        });\r\n\r\n        deleteUser(this.state.username)\r\n            .then(response => {\r\n                setTimeout(() => {\r\n                    this.setState({\r\n                        ModalVisible: false,\r\n                        confirmLoading: false,\r\n                        ModalText: 'ท่านต้องการลบผู้ใช้นี้ใช่หรือไม่ ?',\r\n                    },\r\n                        this.handleLoadData(),\r\n                        Notification.success({\r\n                            message: 'Health QA',\r\n                            description: \"ลบคำถามเรียบร้อยแล้ว\",\r\n                        })\r\n                    );\r\n                }, 1000);\r\n            })\r\n            .catch(error => {\r\n                if (error.status === 401) {\r\n                    this.props.handleLogout('/login', 'error', 'You have been logged out. Please login create Question.');\r\n                } else {\r\n                    Notification.error({\r\n                        message: 'Health QA',\r\n                        description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    toggleDoctor = () => {\r\n        this.setState({\r\n            modal: !this.state.modal,\r\n            isDoctor: true\r\n        });\r\n    }\r\n\r\n    toggleAdmin = () => {\r\n        this.setState({\r\n            modal: !this.state.modal,\r\n            isDoctor: false\r\n        });\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            modal: !this.state.modal,\r\n            isDoctor: null\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { error } = this.state;\r\n        if (this.state.notFound) {\r\n            return <NotFound />;\r\n        }\r\n\r\n        if (this.state.serverError) {\r\n            return <ServerError />;\r\n        }\r\n\r\n        if (error) {\r\n            return (\r\n                <div style={{ textAlign: 'center' }}>\r\n                    <h1>We're sorry, but {error.message || \"Something went wrong. Please try again!\"}</h1>\r\n                    <p>If you are the application owner check the logs for more information.</p>\r\n                </div>\r\n            );\r\n        }\r\n\r\n\r\n        const tabBarStyle = {\r\n            textAlign: 'center'\r\n        };\r\n\r\n        return (\r\n            <Card outline color=\"danger\">\r\n                <ModelReactStrap isOpen={this.state.modal} toggle={this.toggle} handleLoadData={this.handleLoadData} className={this.props.className}>\r\n                    <ModalBody>\r\n                        {this.state.isDoctor ? <SignupDoctor onClick={this.toggle} handleLoadData={this.handleLoadData} {...this.props} /> : <SignupAdmin />}\r\n                    </ModalBody>\r\n                    {/* <ModalFooter>\r\n                        <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\r\n                    </ModalFooter> */}\r\n                </ModelReactStrap>\r\n                <Modal title=\"ยืนยันการทำรายการ\"\r\n                    visible={this.state.ModalVisible}\r\n                    centered\r\n                    onOk={this.handleModalOK}\r\n                    confirmLoading={this.state.confirmLoading}\r\n                    onCancel={this.handleModalCancel}\r\n                >\r\n                    <p>{this.state.ModalText}</p>\r\n                </Modal>\r\n                <CardBody>\r\n                    <div className=\"profile\">\r\n                        <Spin spinning={this.state.isLoading} size=\"large\" delay={200}>\r\n                            <div className=\"user-poll-details\">\r\n                                <Tabs defaultActiveKey=\"1\"\r\n                                    animated={false}\r\n                                    tabBarStyle={tabBarStyle}\r\n                                    size=\"large\"\r\n                                    className=\"profile-tabs\">\r\n                                    <TabPane tab=\"แพทย์/เภสัชกร\" key=\"1\">\r\n                                        <div className=\"mb-2\">\r\n                                            <Button type=\"primary\" onClick={this.toggleDoctor} customToggle={this.state.modal} ghost icon=\"user-add\">เพิ่มผู้ใช้งาน</Button>\r\n                                        </div>\r\n                                        <Table striped>\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th>User ID</th>\r\n                                                    <th>Firstname</th>\r\n                                                    <th>Lastname</th>\r\n                                                    <th>Username</th>\r\n                                                    <th>Email</th>\r\n                                                    <th>Action</th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                {\r\n                                                    this.state.doctor.map(\r\n                                                        (doctor, index) =>\r\n                                                            <tr key={index}>\r\n                                                                <th scope=\"row\">{doctor.id}</th>\r\n                                                                <td>{doctor.firstName}</td>\r\n                                                                <td>{doctor.lastName}</td>\r\n                                                                <td>{doctor.username}</td>\r\n                                                                <td>{doctor.email}</td>\r\n                                                                <td style={{ width: '100px' }}>\r\n                                                                    <div>\r\n                                                                        <Button\r\n                                                                            type=\"danger\"\r\n                                                                            ghost\r\n                                                                            className=\"ml-2\"\r\n                                                                            shape=\"circle\"\r\n                                                                            icon=\"delete\"\r\n                                                                            onClick={(e) => this.handleDeleteButton(doctor.username)} />\r\n                                                                    </div>\r\n                                                                </td>\r\n                                                            </tr>\r\n                                                    )\r\n                                                }\r\n                                            </tbody>\r\n                                        </Table>\r\n                                        {\r\n                                            !this.state.isLoading && this.state.doctor.length === 0 ? (\r\n                                                <div className=\"no-polls-found\">\r\n                                                    <span>No Users Found.</span>\r\n                                                </div>\r\n                                            ) : null\r\n                                        }\r\n                                    </TabPane>\r\n                                    <TabPane tab=\"ผู้ดูแลระบบ\" key=\"2\">\r\n                                        <div className=\"mb-2\">\r\n                                            <Button type=\"primary\" onClick={this.toggleAdmin} ghost icon=\"user-add\">เพิ่มผู้ใช้งาน</Button>\r\n                                        </div>\r\n                                        <Table striped>\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th>User ID</th>\r\n                                                    <th>Firstname</th>\r\n                                                    <th>Lastname</th>\r\n                                                    <th>Username</th>\r\n                                                    <th>Email</th>\r\n                                                    <th>Action</th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                {\r\n                                                    this.state.admin.map(\r\n                                                        (admin, index) =>\r\n                                                            <tr key={index}>\r\n                                                                <th scope=\"row\">{admin.id}</th>\r\n                                                                <td>{admin.firstName}</td>\r\n                                                                <td>{admin.lastName}</td>\r\n                                                                <td>{admin.username}</td>\r\n                                                                <td>{admin.email}</td>\r\n                                                                <td style={{ width: '100px' }}>\r\n                                                                    <div>\r\n                                                                        <Button\r\n                                                                            type=\"danger\"\r\n                                                                            ghost\r\n                                                                            className=\"ml-2\"\r\n                                                                            shape=\"circle\"\r\n                                                                            icon=\"delete\"\r\n                                                                            onClick={(e) => this.handleDeleteButton(admin.username)} />\r\n                                                                    </div>\r\n                                                                </td>\r\n                                                            </tr>\r\n                                                    )\r\n                                                }\r\n                                            </tbody>\r\n                                        </Table>\r\n                                        {\r\n                                            !this.state.isLoading && this.state.admin.length === 0 ? (\r\n                                                <div className=\"no-polls-found\">\r\n                                                    <span>No Users Found.</span>\r\n                                                </div>\r\n                                            ) : null\r\n                                        }\r\n                                    </TabPane>\r\n                                </Tabs>\r\n                            </div>\r\n                        </Spin>\r\n                    </div>\r\n                </CardBody>\r\n            </Card >\r\n        );\r\n    }\r\n}\r\n\r\nexport default ManageUsers;","import React from 'react';\r\n\r\nimport {\r\n  Card, CardHeader, CardBody, Col, Row,\r\n} from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n// import { AvForm, AvField, AvRadioGroup, AvRadio } from 'availity-reactstrap-validation';\r\nimport { createTopic } from '../util/APIUtils';\r\n// import axios from 'axios';\r\nimport { Form, Input, Button, Radio, Select, InputNumber, DatePicker, Notification, Spin } from 'antd';\r\n\r\nconst FormItem = Form.Item;\r\nconst { TextArea } = Input;\r\nconst RadioGroup = Radio.Group;\r\nconst Option = Select.Option;\r\n\r\nexport default class NewTopic extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      \"topicName\": {\r\n        value: ''\r\n      },\r\n      \"topicText\": {\r\n        value: ''\r\n      },\r\n      \"height\": {\r\n        value: ''\r\n      },\r\n      \"weight\": {\r\n        value: ''\r\n      },\r\n      \"ageY\": {\r\n        value: ''\r\n      },\r\n      \"ageM\": {\r\n        value: ''\r\n      },\r\n      \"ageD\": {\r\n        value: ''\r\n      },\r\n      \"sex\": {\r\n        value: 'disabled'\r\n      },\r\n      \"disease\": {\r\n        value: '',\r\n        validateStatus: 'success',\r\n        errorMsg: null,\r\n      },\r\n      \"questionType\": {\r\n        value: ''\r\n      },\r\n      \"questionPurpose\": {\r\n        value: ''\r\n      },\r\n      \"birthDate\": {\r\n        value: ''\r\n      },\r\n      isLoading: false,\r\n    }\r\n    this.handleBirthdayChange = this.handleBirthdayChange.bind(this);\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.isFormInvalid = this.isFormInvalid.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleInputChange(event, validationFun) {\r\n    const target = event.target;\r\n    const inputName = target.name;\r\n    const inputValue = target.value;\r\n    // console.log(inputName)\r\n    this.setState({\r\n      [inputName]: {\r\n        value: inputValue,\r\n        ...validationFun(inputValue)\r\n      }\r\n    });\r\n\r\n    // console.log(this.state)\r\n  }\r\n\r\n\r\n  handleChange(event, name, validationFun) {\r\n    // console.log(event + \"----->>>\" + name + \" ---->>>\" + validationFun(event).validateStatus)\r\n\r\n    this.setState({\r\n      [name]: {\r\n        value: event,\r\n        ...validationFun(event)\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.setState({\r\n      isLoading: true,\r\n    });\r\n\r\n\r\n    if (!this.state.disease.value || !this.state.disease.value.trim()) {\r\n      this.setState({\r\n        disease: {\r\n          value: '-'\r\n        }\r\n      }\r\n      );\r\n    }\r\n    const topicData = {\r\n      \"topicName\": this.state.topicName.value,\r\n      \"topicText\": this.state.topicText.value,\r\n      \"height\": this.state.height.value,\r\n      \"weight\": this.state.weight.value,\r\n      \"ageY\": this.state.ageY.value,\r\n      \"ageM\": this.state.ageM.value,\r\n      \"ageD\": this.state.ageD.value,\r\n      \"sex\": this.state.sex.value,\r\n      \"disease\": this.state.disease.value,\r\n      \"questionType\": this.state.questionType.value,\r\n      \"questionPurpose\": this.state.questionPurpose.value\r\n    };\r\n\r\n    createTopic(topicData)\r\n      .then(response => {\r\n        this.setState({\r\n          isLoading: false,\r\n        },\r\n          this.handleSuccess(response.redirect)\r\n        );\r\n\r\n\r\n      })\r\n      .catch(error => {\r\n        if (error.status === 401) {\r\n          this.props.handleLogout('/login', 'error', 'You have been logged out. Please login create Question.');\r\n        } else {\r\n          Notification.error({\r\n            message: 'Health QA',\r\n            description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  handleSuccess = (redirect) => {\r\n    this.props.history.push(redirect);\r\n    Notification.success({\r\n      message: 'Health QA',\r\n      description: \"ยินดีด้วย ตั้งคำถามสำเร็จแล้ว\",\r\n    });\r\n  }\r\n\r\n  isFormInvalid() {\r\n    return !(this.state.topicName.validateStatus === 'success' &&\r\n      this.state.topicText.validateStatus === 'success' &&\r\n      this.state.height.validateStatus === 'success' &&\r\n      this.state.weight.validateStatus === 'success' &&\r\n      this.state.birthDate.validateStatus === 'success' &&\r\n      this.state.sex.validateStatus === 'success' &&\r\n      this.state.questionType.validateStatus === 'success' &&\r\n      this.state.questionPurpose.validateStatus === 'success' &&\r\n      this.state.disease.validateStatus === 'success'\r\n    );\r\n  }\r\n\r\n  render() {\r\n    let newTopicForm;\r\n    if (this.props.currentUser) {\r\n      newTopicForm = [\r\n        <Card outline color=\"info\">\r\n          <CardHeader style={{ backgroundColor: '#17A2B8', color: '#FFF' }} tag=\"h3\">รายละเอียด</CardHeader>\r\n          <CardBody>\r\n            <Form onSubmit={this.handleSubmit}>\r\n              <FormItem\r\n                label=\"คำถาม\"\r\n                validateStatus={this.state.topicName.validateStatus}\r\n                help={this.state.topicName.errorMsg}>\r\n                <Input\r\n                  size=\"large\"\r\n                  name=\"topicName\"\r\n                  autoComplete=\"off\"\r\n                  placeholder=\"ระบุคำถาม\"\r\n                  value={this.state.topicName.value}\r\n                  onChange={(event) => this.handleInputChange(event, this.validateTopicName)} />\r\n              </FormItem>\r\n              <FormItem\r\n                label=\"รายละเอียดคำถาม\"\r\n                validateStatus={this.state.topicText.validateStatus}\r\n                help={this.state.topicText.errorMsg}>\r\n                <TextArea\r\n                  rows={4}\r\n                  size=\"large\"\r\n                  name=\"topicText\"\r\n                  autoComplete=\"off\"\r\n                  value={this.state.topicText.value}\r\n                  onChange={(event) => this.handleInputChange(event, this.validateTopicText)} />\r\n              </FormItem>\r\n              <FormItem\r\n                label=\"วัตถุประสงค์\"\r\n                validateStatus={this.state.questionPurpose.validateStatus}\r\n                help={this.state.questionPurpose.errorMsg}>\r\n                <Input\r\n                  size=\"large\"\r\n                  name=\"questionPurpose\"\r\n                  autoComplete=\"off\"\r\n                  placeholder=\"ระบุวัตถุประสงค์ที่ถาม\"\r\n                  value={this.state.questionPurpose.value}\r\n                  onChange={(event) => this.handleInputChange(event, this.validatePurpose)} />\r\n              </FormItem>\r\n              <FormItem\r\n                label=\"ประเภทคำถาม\"\r\n                validateStatus={this.state.questionType.validateStatus}\r\n                help={this.state.questionType.errorMsg}>\r\n                <RadioGroup\r\n                  name=\"questionType\"\r\n                  size=\"large\"\r\n                  onChange={(event) => this.handleInputChange(event, this.validateQuestionType)}\r\n                  value={this.state.questionType.value}>\r\n                  <Radio value=\"D\">คำถามเฉพาะทางแพทย์</Radio>\r\n                  <Radio value=\"P\">คำถามเฉพาะทางเภสัชกร</Radio>\r\n                </RadioGroup>\r\n              </FormItem>\r\n              <legend>ข้อมูลผู้ป่วย</legend>\r\n              <Row form>\r\n                <Col md={2}>\r\n                  <FormItem\r\n                    label=\"เพศ\"\r\n                    validateStatus={this.state.sex.validateStatus}\r\n                    help={this.state.sex.errorMsg}>\r\n                    <Select\r\n                      size=\"large\"\r\n                      name=\"sex\"\r\n                      value={this.state.sex.value}\r\n                      // onChange={this.handleChange}\r\n                      onChange={(event) => this.handleChange(event, \"sex\", this.validateSex)}\r\n                    >\r\n                      <Option value=\"disabled\" disabled>เลือกเพศ</Option>\r\n                      <Option value=\"M\">ชาย</Option>\r\n                      <Option value=\"F\">หญิง</Option>\r\n                    </Select>\r\n                  </FormItem>\r\n                </Col>\r\n                <Col md={3}>\r\n                  <FormItem\r\n                    label=\"น้ำหนัก (กก.)\"\r\n                    validateStatus={this.state.weight.validateStatus}\r\n                    help={this.state.weight.errorMsg}>\r\n                    <InputNumber\r\n                      value={this.state.weight.value}\r\n                      style={{ width: '100%' }}\r\n                      name=\"weight\"\r\n                      size=\"large\"\r\n                      min={1}\r\n                      onChange={(event) => this.handleChange(event, \"weight\", this.validateWeight)} />\r\n                  </FormItem>\r\n                </Col>\r\n                <Col md={3}>\r\n                  <FormItem\r\n                    label=\"ส่วนสูง (ซม.)\"\r\n                    validateStatus={this.state.height.validateStatus}\r\n                    help={this.state.height.errorMsg}>\r\n                    <InputNumber\r\n                      value={this.state.height.value}\r\n                      style={{ width: '100%' }}\r\n                      size=\"large\"\r\n                      name=\"height\"\r\n                      min={1}\r\n                      onChange={(event) => this.handleChange(event, \"height\", this.validateHeight)} />\r\n                  </FormItem>\r\n                </Col>\r\n                <Col md={4}>\r\n                  <FormItem\r\n                    label=\"วันเกิด\"\r\n                    validateStatus={this.state.birthDate.validateStatus}\r\n                    help={this.state.birthDate.errorMsg}>\r\n                    <DatePicker\r\n                      // value={this.state.birthDate.value}\r\n                      style={{ width: '100%' }}\r\n                      size=\"large\"\r\n                      // onChange={(event) => this.handleChange(event, \"birthDate\", this.validateBirthDate)}\r\n                      onChange={(date, dateString) => {\r\n                        this.handleBirthdayChange(date, dateString)\r\n                      }}\r\n                    />\r\n                  </FormItem>\r\n                </Col>\r\n              </Row>\r\n              <FormItem\r\n                label=\"โรคประจำตัว\"\r\n                validateStatus={this.state.disease.validateStatus}\r\n                help={this.state.disease.errorMsg}>\r\n                <Input\r\n                  size=\"large\"\r\n                  name=\"disease\"\r\n                  autoComplete=\"off\"\r\n                  placeholder=\"ระบุโรคประจำตัว\"\r\n                  value={this.state.disease.value}\r\n                  onChange={(event) => this.handleInputChange(event, this.validateDisease)} />\r\n              </FormItem>\r\n              <FormItem>\r\n                <Button type=\"primary\"\r\n                  htmlType=\"submit\"\r\n                  size=\"large\"\r\n                  className=\"signup-form-button\"\r\n                  disabled={this.isFormInvalid()}>ตั้งคำถาม</Button>\r\n              </FormItem>\r\n            </Form>\r\n          </CardBody>\r\n        </Card>\r\n      ]\r\n    } else {\r\n      newTopicForm = [\r\n        <div>\r\n          <div style={{ textAlign: 'center' }}>\r\n            <h4>คุณยังไม่ได้เข้าสู่ระบบ, กรุณาเข้าสู่ระบบเพื่อสร้างคำถาม</h4>\r\n          </div>\r\n          <div style={{ textAlign: 'center' }}>\r\n            <Link to=\"/login/\">เข้าสู่ระบบ</Link> หรือคุณยังไม่ได้เป็นสมาชิกใช่ไหม <Link to=\"/signup\">สมัครสมาชิก</Link> เลย!\r\n                    </div>\r\n        </div>\r\n      ]\r\n    }\r\n    return (\r\n      // Show Div Full Page => container-fluid\r\n      <div className=\"container\" id=\"card-margin-top-bottom\">\r\n        <Spin spinning={this.state.isLoading} size=\"large\" style={{marginTop:'30%'}}>\r\n          {newTopicForm}\r\n        </Spin>\r\n      </div>\r\n    );\r\n  }\r\n  // Validation Functions\r\n\r\n  validateTopicName = (topicName) => {\r\n    if (topicName.length === 0) {\r\n      return {\r\n        validateStatus: 'error',\r\n        errorMsg: 'กรุณาระบุคำถาม!'\r\n      }\r\n    } else if (topicName.length < 10) {\r\n      return {\r\n        validateStatus: 'error',\r\n        errorMsg: `คำถามสั้นเกินไปนะ.`\r\n      }\r\n    } else if (topicName.length > 255) {\r\n      return {\r\n        validateStatus: 'error',\r\n        errorMsg: `คำถามยาวเกินไปนะ.`\r\n      }\r\n    } else {\r\n      return {\r\n        validateStatus: 'success',\r\n        errorMsg: null,\r\n      };\r\n    }\r\n\r\n  }\r\n\r\n  validateTopicText = (topicText) => {\r\n    if (topicText.length === 0) {\r\n      return {\r\n        validateStatus: 'error',\r\n        errorMsg: 'กรุณาระบุรายละเอียด!'\r\n      }\r\n    } else if (topicText.length < 10) {\r\n      return {\r\n        validateStatus: 'error',\r\n        errorMsg: `รายละเอียดสั้นเกินไปนะ.`\r\n      }\r\n    } else {\r\n      return {\r\n        validateStatus: 'success',\r\n        errorMsg: null,\r\n      };\r\n    }\r\n  }\r\n\r\n  validateHeight = (height) => {\r\n    if (!height) {\r\n      return {\r\n        validateStatus: 'error',\r\n        errorMsg: `กรุณาระบุส่วนสูง.`\r\n      }\r\n    } else {\r\n      return {\r\n        validateStatus: 'success',\r\n        errorMsg: null,\r\n      };\r\n    }\r\n  }\r\n\r\n  validateWeight = (weight) => {\r\n    if (!weight) {\r\n      return {\r\n        validateStatus: 'error',\r\n        errorMsg: `กรุณาระบุน้ำหนัก.`\r\n      }\r\n    } else {\r\n      return {\r\n        validateStatus: 'success',\r\n        errorMsg: null,\r\n      };\r\n    }\r\n  }\r\n\r\n  handleBirthdayChange = (date, dateString) => {\r\n    const CurrentDate = new Date();\r\n    const GivenDate = new Date(dateString);\r\n\r\n    if (GivenDate > CurrentDate) {\r\n      this.setState({\r\n        birthDate: {\r\n          value: dateString,\r\n          validateStatus: 'error',\r\n          errorMsg: `วันเกิดไม่ถูกต้อง.`\r\n        }\r\n      });\r\n    } else {\r\n\r\n      var mdate = dateString;\r\n      var yearThen = parseInt(mdate.substring(0, 4), 10);\r\n      var monthThen = parseInt(mdate.substring(5, 7), 10);\r\n      var dayThen = parseInt(mdate.substring(8, 10), 10);\r\n\r\n      var bthDate, curDate, days;\r\n      var ageYears, ageMonths, ageDays;\r\n      bthDate = new Date(yearThen, monthThen - 1, dayThen);\r\n      curDate = new Date();\r\n      if (bthDate > curDate) return;\r\n      days = Math.floor((curDate - bthDate) / (1000 * 60 * 60 * 24));\r\n      ageYears = Math.floor(days / 365);\r\n      ageMonths = Math.floor((days % 365) / 31);\r\n      ageDays = days - (ageYears * 365) - (ageMonths * 31);\r\n\r\n      this.setState({\r\n        birthDate: {\r\n          value: dateString,\r\n          validateStatus: 'success',\r\n          errorMsg: null\r\n        },\r\n        ageY: {\r\n          value: ageYears\r\n        },\r\n        ageM: {\r\n          value: ageMonths\r\n        },\r\n        ageD: {\r\n          value: ageDays\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  validateSex = (sex) => {\r\n    if (sex === \"disabled\") {\r\n      return {\r\n        validateStatus: 'error',\r\n        errorMsg: `กรุณาระบุเพศ.`\r\n      }\r\n    } else {\r\n      return {\r\n        validateStatus: 'success',\r\n        errorMsg: null,\r\n      };\r\n    }\r\n  }\r\n\r\n  validateQuestionType = (questionType) => {\r\n    if (!questionType) {\r\n      return {\r\n        validateStatus: 'error',\r\n        errorMsg: `กรุณาเลือกประเภทคำถาม.`\r\n      }\r\n    } else {\r\n      return {\r\n        validateStatus: 'success',\r\n        errorMsg: null,\r\n      };\r\n    }\r\n  }\r\n\r\n  validatePurpose = (purpose) => {\r\n    if (purpose.length === 0) {\r\n      return {\r\n        validateStatus: 'error',\r\n        errorMsg: 'กรุณาระบุวัตถุประสงค์!'\r\n      }\r\n    } else if (purpose.length < 5) {\r\n      return {\r\n        validateStatus: 'error',\r\n        errorMsg: `วัตถุประสงค์สั้นเกินไปนะ.`\r\n      }\r\n    } else if (purpose.length > 255) {\r\n      return {\r\n        validateStatus: 'error',\r\n        errorMsg: `วัตถุประสงค์ยาวเกินไปนะ.`\r\n      }\r\n    } else {\r\n      return {\r\n        validateStatus: 'success',\r\n        errorMsg: null,\r\n      };\r\n    }\r\n  }\r\n\r\n  validateDisease = (disease) => {\r\n    if (disease.length > 255) {\r\n      return {\r\n        validateStatus: 'error',\r\n        errorMsg: `ข้อความยาวเกินไปนะ.`\r\n      }\r\n    } else {\r\n      return {\r\n        validateStatus: 'success',\r\n        errorMsg: null,\r\n      };\r\n    }\r\n  }\r\n\r\n}","import React, { Component } from 'react';\nimport { Button, Spin, Modal, notification } from 'antd';\nimport { Table } from 'reactstrap';\nimport './admin.css';\nimport NotFound from '../common/NotFound';\nimport ServerError from '../common/ServerError';\nimport { getManageTopic, deleteTopic } from '../util/APIUtils';\nimport { Card, CardBody } from 'reactstrap';\n\nclass ManageTopic extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            topic: [],\n            isLoading: false,\n            error: null,\n            ModalText: 'ท่านต้องการลบคำถามนี้ใช่หรือไม่ ?',\n            ModalVisible: false,\n            confirmLoading: false,\n            topicId: null,\n        }\n    }\n\n    componentDidMount() {\n        this.handleLoadData();\n    }\n\n    handleLoadData = () => {\n        this.setState({\n            isLoading: true\n        });\n\n        getManageTopic()\n            .then(response => {\n                this.setState({\n                    topic: response,\n                    isLoading: false\n                });\n            }).catch(error => {\n                if (error.status === 404) {\n                    this.setState({\n                        notFound: true,\n                        isLoading: false\n                    });\n                } else {\n                    this.setState({\n                        serverError: true,\n                        isLoading: false\n                    });\n                }\n            });\n    }\n\n\n    handleTopicViewButton = (e) => {\n        this.props.history.push(\"/topic/\" + e);\n    }\n\n    handleTopicDeleteButton = (e) => {\n        // console.log(e)\n        this.setState({\n            ModalVisible: true,\n            topicId: e,\n        });\n        // this.props.history.push(\"/topic/\" + e);\n    }\n\n    handleModalCancel = () => {\n        // console.log('Clicked cancel button');\n        this.setState({\n            ModalVisible: false,\n        });\n    }\n\n    handleModalOK = () => {\n        this.setState({\n            ModalText: 'กำลังดำเนินการ, กรุณารอสักครู่...',\n            confirmLoading: true,\n        });\n\n        deleteTopic(this.state.topicId)\n            .then(response => {\n                setTimeout(() => {\n                    this.setState({\n                        ModalVisible: false,\n                        confirmLoading: false,\n                        ModalText: 'ท่านต้องการลบคำถามนี้ใช่หรือไม่ ?',\n                    },\n                        this.handleLoadData(),\n                        notification.success({\n                            message: 'Health QA',\n                            description: \"ลบคำถามเรียบร้อยแล้ว\",\n                        })\n                    );\n                }, 1000);\n            })\n            .catch(error => {\n                if (error.status === 401) {\n                    this.props.handleLogout('/login', 'error', 'You have been logged out. Please login create Question.');\n                } else {\n                    Notification.error({\n                        message: 'Health QA',\n                        description: error.message || 'Sorry! Something went wrong. Please try again!'\n                    });\n                }\n            });\n    }\n    render() {\n        const { error } = this.state;\n        if (this.state.notFound) {\n            return <NotFound />;\n        }\n\n        if (this.state.serverError) {\n            return <ServerError />;\n        }\n\n        if (error) {\n            return (\n                <div style={{ textAlign: 'center' }}>\n                    <h1>We're sorry, but {error.message || \"Something went wrong. Please try again!\"}</h1>\n                    <p>If you are the application owner check the logs for more information.</p>\n                </div>\n            );\n        }\n\n\n        return (\n            <Card outline color=\"danger\">\n                <Modal title=\"ยืนยันการทำรายการ\"\n                    visible={this.state.ModalVisible}\n                    centered\n                    onOk={this.handleModalOK}\n                    confirmLoading={this.state.confirmLoading}\n                    onCancel={this.handleModalCancel}\n                >\n                    <p>{this.state.ModalText}</p>\n                </Modal>\n                <CardBody>\n\n                    <div className=\"profile\">\n                        <Spin spinning={this.state.isLoading} size=\"large\" delay={200}>\n                            <div className=\"user-poll-details\">\n                                <Table striped>\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>คำถาม</th>\n                                            <th>รายละเอียด</th>\n                                            <th>Action</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n\n                                        {\n                                            this.state.topic ? (\n                                                this.state.topic.map(\n                                                    (topic, index) =>\n                                                        <tr key={index}>\n                                                            <th scope=\"row\">{topic.id}</th>\n                                                            <td>{topic.topicName.substring(0, 20)}{topic.topicName.length > 60 ? \"...\" : null}</td>\n                                                            <td>{topic.topicText.substring(0, 60)}{topic.topicText.length > 60 ? \"...\" : null}</td>\n                                                            <td style={{ width: '150px' }}>\n                                                                <div>\n                                                                    <Button\n                                                                        type=\"primary\"\n                                                                        ghost\n                                                                        shape=\"circle\"\n                                                                        icon=\"select\"\n                                                                        onClick={(e) => this.handleTopicViewButton(topic.id)} />\n                                                                    <Button\n                                                                        type=\"danger\"\n                                                                        ghost\n                                                                        className=\"ml-2\"\n                                                                        shape=\"circle\"\n                                                                        icon=\"delete\"\n                                                                        onClick={(e) => this.handleTopicDeleteButton(topic.id)} />\n                                                                </div>\n                                                            </td>\n                                                        </tr>\n                                                )\n                                            ) : null\n                                        }\n                                    </tbody>\n                                </Table>\n                                {\n                                    !this.state.isLoading && this.state.topic.length === 0 ? (\n                                            <div className=\"no-polls-found\">\n                                                <span>No Topic Found.</span>\n                                        </div>\n                                    ) : null\n                                }\n                            </div>\n                        </Spin>\n                    </div>\n                </CardBody>\n            </Card>\n        );\n    }\n}\n\nexport default ManageTopic;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport {\r\n  Route,\r\n  withRouter,\r\n  Switch\r\n} from 'react-router-dom';\r\n\r\nimport { getCurrentUser } from '../util/APIUtils';\r\nimport { ACCESS_TOKEN } from '../constants';\r\n\r\n// import NewPoll from '../poll/NewPoll';\r\nimport Login from '../user/login/Login';\r\nimport Signup from '../user/signup/Signup';\r\nimport Profile from '../user/profile/Profile';\r\nimport AppHeader from '../common/AppHeader';\r\nimport NotFound from '../common/NotFound';\r\nimport Home from '../home/Home';\r\n\r\nimport PrivateRoute from '../common/PrivateRoute';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\n\r\nimport Topic from '../topic/Topic';\r\nimport ContactUs from '../contactus/ContactUs';\r\nimport { Layout, notification } from 'antd';\r\n\r\nimport EditProfile from '../user/profile/EditProfile';\r\nimport RequestRemove from '../admin/RequestRemove';\r\nimport ManageUsers from '../admin/ManageUsers';\r\nimport NewTopic from '../topic/NewTopic';\r\n\r\n/*---------------------------------------- FontAwesome ----------------------------------------*/\r\nimport { faEnvelope, faKey, faComments, faQuestion, faTrashAlt, faUserCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport ManageTopic from '../admin/ManageTopic';\r\n\r\nlibrary.add(faEnvelope, faKey, faComments, faQuestion, faTrashAlt, faUserCircle);\r\n/*--------------------------------------------------------------------------------------------*/\r\n\r\nconst { Content } = Layout;\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentUser: null,\r\n      isAuthenticated: false,\r\n      isLoading: false,\r\n      authority: null,\r\n    }\r\n    this.handleLogout = this.handleLogout.bind(this);\r\n    this.loadCurrentUser = this.loadCurrentUser.bind(this);\r\n    this.handleLogin = this.handleLogin.bind(this);\r\n\r\n    notification.config({\r\n      placement: 'topRight',\r\n      top: 70,\r\n      duration: 3,\r\n    });\r\n  }\r\n\r\n  loadCurrentUser() {\r\n    this.setState({\r\n      isLoading: true\r\n    });\r\n    getCurrentUser()\r\n      .then(response => {\r\n        this.setState({\r\n          currentUser: response,\r\n          isAuthenticated: true,\r\n          isLoading: false\r\n        },\r\n          this.handleLoading()\r\n        );\r\n      })\r\n      .catch(error => {\r\n        this.setState({\r\n          isLoading: false\r\n        },\r\n          this.handleLoading()\r\n        );\r\n      });\r\n  }\r\n\r\n  handleLoading = () => {\r\n    const ele = document.getElementById('ipl-progress-indicator')\r\n    if (ele) {\r\n      // fade out\r\n      ele.classList.add('available')\r\n      setTimeout(() => {\r\n        // remove from DOM\r\n        ele.outerHTML = ''\r\n      }, 1000)\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadCurrentUser();\r\n    // if (this.state.currentUser.username)\r\n    // alert(this.state.currentUser.username)\r\n  }\r\n\r\n  handleLogout(redirectTo = \"/\", notificationType = \"success\", description = \"You're successfully logged out.\") {\r\n    localStorage.removeItem(ACCESS_TOKEN);\r\n\r\n    this.setState({\r\n      currentUser: null,\r\n      isAuthenticated: false,\r\n      authorities: null,\r\n    });\r\n\r\n    this.props.history.push(redirectTo);\r\n\r\n    notification[notificationType]({\r\n      message: 'Health QA',\r\n      description: description,\r\n    });\r\n  }\r\n\r\n  handleLogin() {\r\n    notification.success({\r\n      message: 'Health QA',\r\n      description: \"You're successfully logged in.\",\r\n    });\r\n    this.loadCurrentUser();\r\n    // this.props.history.push(\"/\");\r\n    this.props.history.goBack();\r\n  }\r\n\r\n  render() {\r\n    if (this.state.isLoading) {\r\n      // return <LoadingIndicator/>\r\n    }\r\n    return (\r\n\r\n      <Layout className=\"app-container\">\r\n        <AppHeader isAuthenticated={this.state.isAuthenticated}\r\n          currentUser={this.state.currentUser}\r\n          onLogout={this.handleLogout} />\r\n        <Content className=\"app-content\" style={{ background: '#fff'}}>\r\n          <div className=\"container\">\r\n\r\n            <Switch>\r\n              {this.state.currentUser ?\r\n                this.state.currentUser.authorities[0].authority === \"ADMIN\" ?\r\n                  <Route exact path=\"/\"\r\n                    render={(props) => <RequestRemove isAuthenticated={this.state.isAuthenticated} currentUser={this.state.currentUser} {...props} />}>\r\n                  </Route>\r\n                  :\r\n                  <Route exact path=\"/\"\r\n                    render={() => <Home />}>\r\n                  </Route>\r\n                : <Route exact path=\"/\"\r\n                  render={() => <Home />}>\r\n                </Route>\r\n              }\r\n\r\n\r\n              <Route path=\"/topic/:id\"\r\n                render={(props) => <Topic isAuthenticated={this.state.isAuthenticated} currentUser={this.state.currentUser} {...props} />}></Route>\r\n\r\n              <Route path=\"/contactus\" component={ContactUs}></Route>\r\n\r\n              <Route path=\"/login\"\r\n                render={(props) => <Login isAuthenticated={this.state.isAuthenticated} currentUser={this.state.currentUser} onLogin={this.handleLogin} {...props} />}></Route>\r\n\r\n              <Route path=\"/signup\"\r\n                render={(props) => <Signup isAuthenticated={this.state.isAuthenticated} {...props} />}></Route>\r\n\r\n              <Route path=\"/users/:username\"\r\n                render={(props) => <Profile isAuthenticated={this.state.isAuthenticated} currentUser={this.state.currentUser} {...props} />}>\r\n              </Route>\r\n              <Route path=\"/edit/users/:username\"\r\n                render={(props) => <EditProfile isAuthenticated={this.state.isAuthenticated} currentUser={this.state.currentUser} {...props} />}>\r\n              </Route>\r\n\r\n              <Route path=\"/new-topic\"\r\n                render={(props) => <NewTopic isAuthenticated={this.state.isAuthenticated} currentUser={this.state.currentUser} {...props} />}>\r\n              </Route>\r\n              <PrivateRoute authenticated={this.state.isAuthenticated} path=\"/admin/manage/user\" currentUser={this.state.currentUser} component={ManageUsers} handleLogout={this.handleLogout}></PrivateRoute>\r\n              <PrivateRoute authenticated={this.state.isAuthenticated} path=\"/admin/manage/topic\" currentUser={this.state.currentUser} component={ManageTopic} handleLogout={this.handleLogout}></PrivateRoute>\r\n\r\n              <Route path=\"/NotFound\" component={NotFound}></Route>\r\n              <Route component={NotFound}></Route>\r\n            </Switch>\r\n          </div>\r\n        </Content>\r\n        {/* <Footer style={{ textAlign: 'center', bottom: 'calc()', position: 'absolute',width:'100%' }} >Health QA ©2018 Created by Chaloemphisit Sirichai</Footer> */}\r\n      </Layout >\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(App);\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport registerServiceWorker from './registerServiceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>, \n    document.getElementById('root')\n);\n\nregisterServiceWorker();\n"],"sourceRoot":""}